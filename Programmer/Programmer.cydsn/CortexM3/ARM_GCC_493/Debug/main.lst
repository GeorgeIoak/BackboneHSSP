ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	currentStep,1,1
  19              		.section	.text.main,"ax",%progbits
  20              		.align	2
  21              		.global	main
  22              		.thumb
  23              		.thumb_func
  24              		.type	main, %function
  25              	main:
  26              	.LFB63:
  27              		.file 1 "main.c"
   1:main.c        **** /******************************************************************************
   2:main.c        **** 
   3:main.c        **** 
   4:main.c        **** *******************************************************************************
   5:main.c        **** *  Project Name: A_Hssp_Programmer
   6:main.c        **** *  Project Revision: 1.00
   7:main.c        **** *  Software Version: PSoC Creator 3.3
   8:main.c        **** *  Device Tested: CY8C5868AXI-LP035
   9:main.c        **** *  Compilers Tested: ARM GCC 4.9-2015-q1-update
  10:main.c        **** *  Related Hardware: CY8CKIT-050
  11:main.c        **** ******************************************************************************/
  12:main.c        **** 
  13:main.c        **** /******************************************************************************
  14:main.c        **** * Project Description:
  15:main.c        **** * This is a sample HSSP implmentation demonstrating a PSoC 5LP programming
  16:main.c        **** * PSoC 4. The project is tested using CY8CKIT-050 with PSoC 5LP chip and 
  17:main.c        **** * CY8CKIT-001 with PSoC 4 processor module.
  18:main.c        **** *
  19:main.c        **** * Connections Required
  20:main.c        **** * CY8CKIT-050 (PSoC 5LP DVK) :
  21:main.c        **** *  Pin_SWDIO (P0[0])- This pin is connected to SWDIO (Debug pin) of PSoC 4 kit.
  22:main.c        **** *  Pin_SWDCK (P0[1])- This pin is connected to SWDCK (Debug pin) of PSoC 4 kit.
  23:main.c        **** *  Pin_XRES  (P0[2])- This pin is connected to XRES input of PSoC kit.
  24:main.c        **** *  Pin_Start (P6[1])- This pin is internally connected to switch SW2.
  25:main.c        **** *
  26:main.c        **** * Note that the GNDs of both DVKs should be connected together and Power should
  27:main.c        **** * be supplied from a single source.
  28:main.c        **** *
  29:main.c        **** * The hex file included in this project toggles pin P1[6] of PSoC 4 at 1Hz
  30:main.c        **** * frequency and displays “PSoC Programmed” on the character LCD mounted on
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 2


  31:main.c        **** * CY8CKIT-001 DVK.
  32:main.c        **** * 
  33:main.c        **** * Connections required on the CY8CKIT-001 with PSoC 4 Processor Module :
  34:main.c        **** * 	1. Connect P1[6] to LED1
  35:main.c        **** *	2. Mount character LCD on the kit
  36:main.c        **** *
  37:main.c        **** * Press SW2 on the PSoC 5LP DVK to start the programming operation.
  38:main.c        **** * ProgramDevice() function in main.c calls all the programming steps
  39:main.c        **** * sequentially to program PSoC 4.
  40:main.c        **** *
  41:main.c        **** * main.c checks the result of ProgramDevice() function and if it returns 
  42:main.c        **** * SUCCESS, "HSSP Success" is displayed on the character LCD mounted on the
  43:main.c        **** * PSoC 5LP kit. If ProgramDevice() returns failure, Step of failure, Reason
  44:main.c        **** * of failure is displayed on the LCD. If the error is because of SROM, It
  45:main.c        **** * displays the SROM error code.
  46:main.c        **** *
  47:main.c        **** * On the PSoC 4 Side, LED connected to P1[6] starts to toggle at 1 Hz
  48:main.c        **** * frequency and character LCD displays the message after successful 
  49:main.c        **** * programming.
  50:main.c        **** *
  51:main.c        **** * Note:
  52:main.c        **** *  The Character LCD functions and the Pin_Start APIs in the main() function
  53:main.c        **** *  are for PSoC 5LP host programmer. If you are using any other microcontroller,
  54:main.c        **** *  replace the functions with the APIs supported by the host or change the macro
  55:main.c        **** *  USE_LCD and USE_START_PIN to 0 to remove all LCD and Pin_Start functions.
  56:main.c        **** ******************************************************************************/
  57:main.c        **** 
  58:main.c        **** /* This file is included for calling Character LCD and Pin_Start APIs in
  59:main.c        ****    PSoC 5LP. Remove this header file while porting to non PSoC 5LP host
  60:main.c        ****    programmer */
  61:main.c        **** #include <device.h>
  62:main.c        **** 
  63:main.c        **** #include <project.h>
  64:main.c        **** 
  65:main.c        **** /* These macros are used to remove all LCD and Pin_Start functions while
  66:main.c        ****    porting this code to non PSoC 5LP host programmer */
  67:main.c        **** #define USE_LCD 		0
  68:main.c        **** #define USE_START_PIN 	1
  69:main.c        **** 
  70:main.c        **** /* This file has the top level HSSP routines that should be called from main
  71:main.c        ****    application code */
  72:main.c        **** #include "ProgrammingSteps.h"
  73:main.c        **** 
  74:main.c        **** /* Function which sequentially calls all the programming steps */
  75:main.c        **** unsigned char ProgramDevice(void);
  76:main.c        **** 
  77:main.c        **** /* Global variable which stores the current programming step under execution */
  78:main.c        **** unsigned char currentStep;
  79:main.c        **** 
  80:main.c        **** /* Slave address of the EZI2C */
  81:main.c        **** //#define EZI2C_SLAVE_ADDR        (0x08u)
  82:main.c        **** //#define BUFFER_SIZE             (0x04u)
  83:main.c        **** //#define BUFFER_RW_AREA_SIZE     (0x02u)
  84:main.c        **** 
  85:main.c        **** /* Denotes the offset inside the EZI2C buffer */
  86:main.c        **** //#define SLAVE_ADDR_SIZE         (0x01u)
  87:main.c        **** 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 3


  88:main.c        **** //#define ACTION_SELECT_NONE      (0x00u)     /* Do nothing       */
  89:main.c        **** //#define ACTION_SELECT_WRITE     (0x01u)     /* Write to EZI2C   */
  90:main.c        **** //#define ACTION_SELECT_READ      (0x02u)     /* Read from EZI2C  */
  91:main.c        **** 
  92:main.c        **** /* Desing interrupt handlers for SW1 and SW2 event */
  93:main.c        **** CY_ISR_PROTO(ISR_WriteSW1_Interrupt);
  94:main.c        **** CY_ISR_PROTO(ISR_ReadSW2_Interrupt);
  95:main.c        **** 
  96:main.c        **** /* EZI2C buffer */
  97:main.c        **** //uint8   ezi2cBuffer[BUFFER_SIZE];
  98:main.c        **** 
  99:main.c        **** /* I2C buffer with the data read from EZI2C */
 100:main.c        **** //uint8   i2cBufferRead[BUFFER_SIZE];
 101:main.c        **** 
 102:main.c        **** /* I2C buffer with the data to be written to EZI2C */
 103:main.c        **** //uint8   i2cBufferWrite[SLAVE_ADDR_SIZE + BUFFER_SIZE];
 104:main.c        **** 
 105:main.c        **** /* Initialize action variable */
 106:main.c        **** //volatile uint8 actionSelect = ACTION_SELECT_NONE;
 107:main.c        **** 
 108:main.c        **** int main()
 109:main.c        **** {
  28              		.loc 1 109 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40              	.L5:
  41              	.LBB2:
 110:main.c        ****     for( ; ; )
 111:main.c        ****     {
 112:main.c        ****     /* Variable to store the result of HSSP operation */
 113:main.c        ****     unsigned char programResult;   
 114:main.c        **** 	
 115:main.c        **** 	/* Variable to store the HSSP Error status in case of failure */
 116:main.c        ****     unsigned char errorStatus; 
 117:main.c        **** 	
 118:main.c        **** 	/* Variable to store the SROM Error status if errorStatus contains
 119:main.c        **** 	   SROM_TIMEOUT_ERROR error */
 120:main.c        ****     unsigned char sromErrorStatus;
 121:main.c        ****         
 122:main.c        ****     Pin_Power_Write(1); //Turn Relay OFF on Power Up
  42              		.loc 1 122 0
  43 0006 0120     		movs	r0, #1
  44 0008 FFF7FEFF 		bl	Pin_Power_Write
 123:main.c        **** 	
 124:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 125:main.c        **** 	if(USE_LCD)
 126:main.c        **** 	{
 127:main.c        **** 		/* Initialize Character LCD  */
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 4


 128:main.c        **** 	    LCD_Char_Start();
 129:main.c        **** 		
 130:main.c        **** 		/* Display the message */
 131:main.c        **** 		LCD_Char_Position(0,0);
 132:main.c        **** 		LCD_Char_PrintString("Press SWITCH SW2");
 133:main.c        **** 	}
 134:main.c        ****     
 135:main.c        **** 	/* Set USE_START_PIN macro to 0 if PSoC 5LP is not used as host
 136:main.c        **** 	   microcontroller */
 137:main.c        **** 	if(USE_START_PIN)
 138:main.c        **** 	{
 139:main.c        **** 		while (Pin_Start_Read() == 1);
  45              		.loc 1 139 0
  46 000c 00BF     		nop
  47              	.L2:
  48              		.loc 1 139 0 is_stmt 0 discriminator 1
  49 000e FFF7FEFF 		bl	Pin_Start_Read
  50 0012 0346     		mov	r3, r0
  51 0014 012B     		cmp	r3, #1
  52 0016 FAD0     		beq	.L2
 140:main.c        **** 	}
 141:main.c        **** 	
 142:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 143:main.c        **** 	if(USE_LCD)
 144:main.c        **** 	{
 145:main.c        **** 		/* Clear Character LCD  */
 146:main.c        **** 		LCD_Char_ClearDisplay();
 147:main.c        **** 		
 148:main.c        **** 		/* Display the message */
 149:main.c        **** 	    LCD_Char_Position(0,0);
 150:main.c        **** 	    LCD_Char_PrintString("Programming PSoC4");
 151:main.c        **** 	}
 152:main.c        ****     
 153:main.c        ****     LED_R_Write(0);
  53              		.loc 1 153 0 is_stmt 1
  54 0018 0020     		movs	r0, #0
  55 001a FFF7FEFF 		bl	LED_R_Write
 154:main.c        ****     LED_G_Write(0);
  56              		.loc 1 154 0
  57 001e 0020     		movs	r0, #0
  58 0020 FFF7FEFF 		bl	LED_G_Write
 155:main.c        ****     LED_B_Write(0);
  59              		.loc 1 155 0
  60 0024 0020     		movs	r0, #0
  61 0026 FFF7FEFF 		bl	LED_B_Write
 156:main.c        ****     LED_R_GND_Write(0);
  62              		.loc 1 156 0
  63 002a 0020     		movs	r0, #0
  64 002c FFF7FEFF 		bl	LED_R_GND_Write
 157:main.c        ****     /* Write a byte to a Control Register */
 158:main.c        ****     Control_Reg_Write(0x00u); //Enables PWM
  65              		.loc 1 158 0
  66 0030 0020     		movs	r0, #0
  67 0032 FFF7FEFF 		bl	Control_Reg_Write
 159:main.c        ****     PWM_Start();
  68              		.loc 1 159 0
  69 0036 FFF7FEFF 		bl	PWM_Start
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 5


 160:main.c        ****        
 161:main.c        ****     /* Start EZI2C */
 162:main.c        ****    // EZI2C_Start();
 163:main.c        ****     
 164:main.c        ****     /* Enable global interrupts */
 165:main.c        ****     CyGlobalIntEnable;
  70              		.loc 1 165 0
  71              	@ 165 "main.c" 1
  72 003a 62B6     		CPSIE   i
  73              	@ 0 "" 2
 166:main.c        ****     
 167:main.c        ****     /* Initialize EZI2C buffer's read only data */
 168:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE     ] = 0xAAu;
 169:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE + 1u] = 0xBBu;
 170:main.c        **** 
 171:main.c        ****     /***************************************************************************
 172:main.c        ****     * The first parameter sets the size of the exposed memory to the I2C
 173:main.c        ****     * interface. In this case, it is the entire array. The second parameter sets
 174:main.c        ****     * the boundary between the read/write and read only areas by setting the
 175:main.c        ****     * number of bytes in the read/write area. The read/write area is first,
 176:main.c        ****     * followed by the read only area. In this case, only the first
 177:main.c        ****     * BUFFER_RW_AREA_SIZE bytes may be written, but all bytes may be read by the
 178:main.c        ****     * I2C master. The third parameter is a pointer to the data.
 179:main.c        ****     ***************************************************************************/
 180:main.c        ****     //EZI2C_SetBuffer1(BUFFER_SIZE, BUFFER_RW_AREA_SIZE, (void *) ezi2cBuffer);
 181:main.c        **** 
 182:main.c        **** 
 183:main.c        ****     /* Start the HSSP Programming and store the status */
 184:main.c        ****     Pin_Power_Write(0); //Turn relay on to power DUT, active low
  74              		.loc 1 184 0
  75              		.thumb
  76 003c 0020     		movs	r0, #0
  77 003e FFF7FEFF 		bl	Pin_Power_Write
 185:main.c        ****     programResult = ProgramDevice();
  78              		.loc 1 185 0
  79 0042 FFF7FEFF 		bl	ProgramDevice
  80 0046 0346     		mov	r3, r0
  81 0048 FB71     		strb	r3, [r7, #7]
 186:main.c        ****     
 187:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 188:main.c        **** 	if(USE_LCD)
 189:main.c        **** 	{
 190:main.c        **** 	    /* Character LCD will display the status of HSSP Programming  */
 191:main.c        **** 	    LCD_Char_ClearDisplay();
 192:main.c        **** 	}
 193:main.c        ****     /* Write a byte to a Control Register */
 194:main.c        ****     Control_Reg_Write(0x01u); //Kills PWM
  82              		.loc 1 194 0
  83 004a 0120     		movs	r0, #1
  84 004c FFF7FEFF 		bl	Control_Reg_Write
 195:main.c        ****     PWM_Stop();
  85              		.loc 1 195 0
  86 0050 FFF7FEFF 		bl	PWM_Stop
 196:main.c        ****     LED_B_Write(0); //Turn Blue LED OFF
  87              		.loc 1 196 0
  88 0054 0020     		movs	r0, #0
  89 0056 FFF7FEFF 		bl	LED_B_Write
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 6


 197:main.c        ****     
 198:main.c        **** 	/* HSSP completed successfully */
 199:main.c        ****     if(programResult == SUCCESS) 
  90              		.loc 1 199 0
  91 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  92 005c 012B     		cmp	r3, #1
  93 005e 03D1     		bne	.L3
 200:main.c        ****     {
 201:main.c        **** 
 202:main.c        ****         LED_G_Write(1);
  94              		.loc 1 202 0
  95 0060 0120     		movs	r0, #1
  96 0062 FFF7FEFF 		bl	LED_G_Write
  97 0066 12E0     		b	.L4
  98              	.L3:
 203:main.c        ****         
 204:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 205:main.c        ****         if(USE_LCD)
 206:main.c        **** 		{
 207:main.c        **** 			LCD_Char_Position(0,0);
 208:main.c        ****         	LCD_Char_PrintString("HSSP Success");
 209:main.c        ****     	}
 210:main.c        **** 	}
 211:main.c        **** 	
 212:main.c        **** 	/* HSSP Failure */
 213:main.c        ****     else
 214:main.c        ****     {
 215:main.c        ****         LED_R_Write(1);
  99              		.loc 1 215 0
 100 0068 0120     		movs	r0, #1
 101 006a FFF7FEFF 		bl	LED_R_Write
 216:main.c        ****         LED_R_GND_Write(0);
 102              		.loc 1 216 0
 103 006e 0020     		movs	r0, #0
 104 0070 FFF7FEFF 		bl	LED_R_GND_Write
 217:main.c        **** 
 218:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 219:main.c        ****         if(USE_LCD)
 220:main.c        **** 		{
 221:main.c        **** 			/* Display the step number where the HSSP failed */
 222:main.c        **** 	        LCD_Char_Position(0,0);
 223:main.c        **** 	        LCD_Char_PrintString("HSSP Fail Step");
 224:main.c        **** 	        LCD_Char_PrintInt8(currentStep);
 225:main.c        **** 		}
 226:main.c        ****         		
 227:main.c        ****         /* Get the HSSP error status and display on THE LCD */
 228:main.c        ****         errorStatus = ReadHsspErrorStatus();
 105              		.loc 1 228 0
 106 0074 FFF7FEFF 		bl	ReadHsspErrorStatus
 107 0078 0346     		mov	r3, r0
 108 007a BB71     		strb	r3, [r7, #6]
 229:main.c        ****         
 230:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 231:main.c        **** 		if(USE_LCD)
 232:main.c        **** 		{
 233:main.c        **** 	        LCD_Char_Position(1,0);
 234:main.c        **** 	        LCD_Char_PrintString("Err ");
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 7


 235:main.c        **** 	        LCD_Char_PrintInt8(errorStatus);
 236:main.c        **** 		}
 237:main.c        ****         
 238:main.c        ****         /* If the errorStatus contains THE SROM_TIMEOUT_ERROR error condition,
 239:main.c        ****            read the Status Code returned by CPUSS_SYSARG register and display
 240:main.c        **** 		   on THE LCD */
 241:main.c        ****         if(errorStatus & SROM_TIMEOUT_ERROR)
 109              		.loc 1 241 0
 110 007c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 111 007e 03F02003 		and	r3, r3, #32
 112 0082 002B     		cmp	r3, #0
 113 0084 03D0     		beq	.L4
 242:main.c        ****         {
 243:main.c        ****             sromErrorStatus = ReadSromStatus();
 114              		.loc 1 243 0
 115 0086 FFF7FEFF 		bl	ReadSromStatus
 116 008a 0346     		mov	r3, r0
 117 008c 7B71     		strb	r3, [r7, #5]
 118              	.L4:
 244:main.c        ****             
 245:main.c        **** 			/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 246:main.c        **** 			if(USE_LCD)
 247:main.c        **** 			{
 248:main.c        **** 				LCD_Char_PrintString(" SROM ");
 249:main.c        **** 				LCD_Char_PrintInt8(sromErrorStatus);
 250:main.c        **** 			}
 251:main.c        ****         }
 252:main.c        ****     }
 253:main.c        ****     Pin_Power_Write(1); //Done programming power DUT OFF
 119              		.loc 1 253 0
 120 008e 0120     		movs	r0, #1
 121 0090 FFF7FEFF 		bl	Pin_Power_Write
 122              	.LBE2:
 254:main.c        **** 
 255:main.c        **** 
 256:main.c        ****         /* Do Nothing */
 257:main.c        ****     }
 123              		.loc 1 257 0
 124 0094 B7E7     		b	.L5
 125              		.cfi_endproc
 126              	.LFE63:
 127              		.size	main, .-main
 128 0096 00BF     		.section	.rodata
 129              		.align	2
 130              	.LC0:
 131 0000 44657620 		.ascii	"Dev Acquire   OK\000"
 131      41637175 
 131      69726520 
 131      20204F4B 
 131      00
 132 0011 000000   		.align	2
 133              	.LC1:
 134 0014 56657269 		.ascii	"Verify Sil    OK\000"
 134      66792053 
 134      696C2020 
 134      20204F4B 
 134      00
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 8


 135 0025 000000   		.align	2
 136              	.LC2:
 137 0028 45726173 		.ascii	"Erase All     OK\000"
 137      6520416C 
 137      6C202020 
 137      20204F4B 
 137      00
 138 0039 000000   		.align	2
 139              	.LC3:
 140 003c 43686B53 		.ascii	"ChkSumPrv     OK\000"
 140      756D5072 
 140      76202020 
 140      20204F4B 
 140      00
 141 004d 000000   		.align	2
 142              	.LC4:
 143 0050 50726F67 		.ascii	"Program Flash OK\000"
 143      72616D20 
 143      466C6173 
 143      68204F4B 
 143      00
 144 0061 000000   		.align	2
 145              	.LC5:
 146 0064 56657269 		.ascii	"Verify Flash  OK\000"
 146      66792046 
 146      6C617368 
 146      20204F4B 
 146      00
 147 0075 000000   		.align	2
 148              	.LC6:
 149 0078 50726720 		.ascii	"Prg Protect   OK\000"
 149      50726F74 
 149      65637420 
 149      20204F4B 
 149      00
 150 0089 000000   		.align	2
 151              	.LC7:
 152 008c 56657269 		.ascii	"Verify ChkSum OK\000"
 152      66792043 
 152      686B5375 
 152      6D204F4B 
 152      00
 153 009d 000000   		.section	.text.ProgramDevice,"ax",%progbits
 154              		.align	2
 155              		.global	ProgramDevice
 156              		.thumb
 157              		.thumb_func
 158              		.type	ProgramDevice, %function
 159              	ProgramDevice:
 160              	.LFB64:
 258:main.c        **** }
 259:main.c        **** 
 260:main.c        **** /******************************************************************************
 261:main.c        **** * Function Name: unsigned char ProgramDevice(void)
 262:main.c        **** *******************************************************************************
 263:main.c        **** * Summary:
 264:main.c        **** *  This function sequentially calls all the functions required to program a
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 9


 265:main.c        **** *  PSoC 4. These functions are defined in ProgrammingSteps.h.
 266:main.c        **** *
 267:main.c        **** * Parameters:
 268:main.c        **** *  None.
 269:main.c        **** *
 270:main.c        **** * Return:
 271:main.c        **** *  SUCCESS - All the programming steps executed successfully
 272:main.c        **** *  FAILURE - HSSP programming fails in any one of the programming step
 273:main.c        **** *
 274:main.c        **** ******************************************************************************/
 275:main.c        **** unsigned char ProgramDevice()
 276:main.c        **** {
 161              		.loc 1 276 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165 0000 80B5     		push	{r7, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 00AF     		add	r7, sp, #0
 170              		.cfi_def_cfa_register 7
 277:main.c        ****     currentStep = 0;
 171              		.loc 1 277 0
 172 0004 564B     		ldr	r3, .L16
 173 0006 0022     		movs	r2, #0
 174 0008 1A70     		strb	r2, [r3]
 278:main.c        ****     
 279:main.c        ****     currentStep++;    
 175              		.loc 1 279 0
 176 000a 554B     		ldr	r3, .L16
 177 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 178 000e 0133     		adds	r3, r3, #1
 179 0010 DAB2     		uxtb	r2, r3
 180 0012 534B     		ldr	r3, .L16
 181 0014 1A70     		strb	r2, [r3]
 280:main.c        ****     //LED_B_Write(!LED_B_Read());
 281:main.c        ****     if(DeviceAcquire() == FAILURE)     
 182              		.loc 1 281 0
 183 0016 FFF7FEFF 		bl	DeviceAcquire
 184 001a 0346     		mov	r3, r0
 185 001c 002B     		cmp	r3, #0
 186 001e 01D1     		bne	.L7
 282:main.c        ****         return(FAILURE);
 187              		.loc 1 282 0
 188 0020 0023     		movs	r3, #0
 189 0022 9BE0     		b	.L8
 190              	.L7:
 283:main.c        ****         LCD_Char_Position(0,0);
 191              		.loc 1 283 0
 192 0024 0020     		movs	r0, #0
 193 0026 0021     		movs	r1, #0
 194 0028 FFF7FEFF 		bl	LCD_Char_Position
 284:main.c        ****         LCD_Char_PrintString("Dev Acquire   OK");
 195              		.loc 1 284 0
 196 002c 4D48     		ldr	r0, .L16+4
 197 002e FFF7FEFF 		bl	LCD_Char_PrintString
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 10


 285:main.c        ****     
 286:main.c        ****     currentStep++;
 198              		.loc 1 286 0
 199 0032 4B4B     		ldr	r3, .L16
 200 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 201 0036 0133     		adds	r3, r3, #1
 202 0038 DAB2     		uxtb	r2, r3
 203 003a 494B     		ldr	r3, .L16
 204 003c 1A70     		strb	r2, [r3]
 287:main.c        ****         //LED_B_Write(!LED_B_Read());
 288:main.c        ****     if(VerifySiliconId() == FAILURE)    
 205              		.loc 1 288 0
 206 003e FFF7FEFF 		bl	VerifySiliconId
 207 0042 0346     		mov	r3, r0
 208 0044 002B     		cmp	r3, #0
 209 0046 01D1     		bne	.L9
 289:main.c        ****         return(FAILURE);
 210              		.loc 1 289 0
 211 0048 0023     		movs	r3, #0
 212 004a 87E0     		b	.L8
 213              	.L9:
 290:main.c        ****     LCD_Char_Position(0,0);
 214              		.loc 1 290 0
 215 004c 0020     		movs	r0, #0
 216 004e 0021     		movs	r1, #0
 217 0050 FFF7FEFF 		bl	LCD_Char_Position
 291:main.c        ****     LCD_Char_PrintString("Verify Sil    OK");
 218              		.loc 1 291 0
 219 0054 4448     		ldr	r0, .L16+8
 220 0056 FFF7FEFF 		bl	LCD_Char_PrintString
 292:main.c        **** 
 293:main.c        ****     currentStep++;
 221              		.loc 1 293 0
 222 005a 414B     		ldr	r3, .L16
 223 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224 005e 0133     		adds	r3, r3, #1
 225 0060 DAB2     		uxtb	r2, r3
 226 0062 3F4B     		ldr	r3, .L16
 227 0064 1A70     		strb	r2, [r3]
 294:main.c        ****         //LED_B_Write(!LED_B_Read());
 295:main.c        ****     if(EraseAllFlash() == FAILURE)             
 228              		.loc 1 295 0
 229 0066 FFF7FEFF 		bl	EraseAllFlash
 230 006a 0346     		mov	r3, r0
 231 006c 002B     		cmp	r3, #0
 232 006e 01D1     		bne	.L10
 296:main.c        ****         return(FAILURE);
 233              		.loc 1 296 0
 234 0070 0023     		movs	r3, #0
 235 0072 73E0     		b	.L8
 236              	.L10:
 297:main.c        ****     LCD_Char_Position(0,0);
 237              		.loc 1 297 0
 238 0074 0020     		movs	r0, #0
 239 0076 0021     		movs	r1, #0
 240 0078 FFF7FEFF 		bl	LCD_Char_Position
 298:main.c        ****     LCD_Char_PrintString("Erase All     OK");
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 11


 241              		.loc 1 298 0
 242 007c 3B48     		ldr	r0, .L16+12
 243 007e FFF7FEFF 		bl	LCD_Char_PrintString
 299:main.c        **** 
 300:main.c        ****     currentStep++;
 244              		.loc 1 300 0
 245 0082 374B     		ldr	r3, .L16
 246 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 247 0086 0133     		adds	r3, r3, #1
 248 0088 DAB2     		uxtb	r2, r3
 249 008a 354B     		ldr	r3, .L16
 250 008c 1A70     		strb	r2, [r3]
 301:main.c        ****        // LED_B_Write(!LED_B_Read());
 302:main.c        ****     if(ChecksumPrivileged() == FAILURE)                    
 251              		.loc 1 302 0
 252 008e FFF7FEFF 		bl	ChecksumPrivileged
 253 0092 0346     		mov	r3, r0
 254 0094 002B     		cmp	r3, #0
 255 0096 01D1     		bne	.L11
 303:main.c        ****         return(FAILURE);
 256              		.loc 1 303 0
 257 0098 0023     		movs	r3, #0
 258 009a 5FE0     		b	.L8
 259              	.L11:
 304:main.c        ****     LCD_Char_Position(0,0);
 260              		.loc 1 304 0
 261 009c 0020     		movs	r0, #0
 262 009e 0021     		movs	r1, #0
 263 00a0 FFF7FEFF 		bl	LCD_Char_Position
 305:main.c        ****     LCD_Char_PrintString("ChkSumPrv     OK");
 264              		.loc 1 305 0
 265 00a4 3248     		ldr	r0, .L16+16
 266 00a6 FFF7FEFF 		bl	LCD_Char_PrintString
 306:main.c        **** 
 307:main.c        ****     currentStep++;
 267              		.loc 1 307 0
 268 00aa 2D4B     		ldr	r3, .L16
 269 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 270 00ae 0133     		adds	r3, r3, #1
 271 00b0 DAB2     		uxtb	r2, r3
 272 00b2 2B4B     		ldr	r3, .L16
 273 00b4 1A70     		strb	r2, [r3]
 308:main.c        ****        // LED_B_Write(!LED_B_Read());
 309:main.c        ****     if(ProgramFlash() == FAILURE)          
 274              		.loc 1 309 0
 275 00b6 FFF7FEFF 		bl	ProgramFlash
 276 00ba 0346     		mov	r3, r0
 277 00bc 002B     		cmp	r3, #0
 278 00be 01D1     		bne	.L12
 310:main.c        ****         return(FAILURE);
 279              		.loc 1 310 0
 280 00c0 0023     		movs	r3, #0
 281 00c2 4BE0     		b	.L8
 282              	.L12:
 311:main.c        ****     LCD_Char_Position(0,0);
 283              		.loc 1 311 0
 284 00c4 0020     		movs	r0, #0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 12


 285 00c6 0021     		movs	r1, #0
 286 00c8 FFF7FEFF 		bl	LCD_Char_Position
 312:main.c        ****     LCD_Char_PrintString("Program Flash OK");
 287              		.loc 1 312 0
 288 00cc 2948     		ldr	r0, .L16+20
 289 00ce FFF7FEFF 		bl	LCD_Char_PrintString
 313:main.c        **** 
 314:main.c        ****     currentStep++;
 290              		.loc 1 314 0
 291 00d2 234B     		ldr	r3, .L16
 292 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 00d6 0133     		adds	r3, r3, #1
 294 00d8 DAB2     		uxtb	r2, r3
 295 00da 214B     		ldr	r3, .L16
 296 00dc 1A70     		strb	r2, [r3]
 315:main.c        ****        // LED_B_Write(!LED_B_Read());
 316:main.c        ****     if(VerifyFlash() == FAILURE)       
 297              		.loc 1 316 0
 298 00de FFF7FEFF 		bl	VerifyFlash
 299 00e2 0346     		mov	r3, r0
 300 00e4 002B     		cmp	r3, #0
 301 00e6 01D1     		bne	.L13
 317:main.c        ****         return(FAILURE);
 302              		.loc 1 317 0
 303 00e8 0023     		movs	r3, #0
 304 00ea 37E0     		b	.L8
 305              	.L13:
 318:main.c        ****     LCD_Char_Position(0,0);
 306              		.loc 1 318 0
 307 00ec 0020     		movs	r0, #0
 308 00ee 0021     		movs	r1, #0
 309 00f0 FFF7FEFF 		bl	LCD_Char_Position
 319:main.c        ****     LCD_Char_PrintString("Verify Flash  OK");
 310              		.loc 1 319 0
 311 00f4 2048     		ldr	r0, .L16+24
 312 00f6 FFF7FEFF 		bl	LCD_Char_PrintString
 320:main.c        **** 
 321:main.c        ****     currentStep++;
 313              		.loc 1 321 0
 314 00fa 194B     		ldr	r3, .L16
 315 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 316 00fe 0133     		adds	r3, r3, #1
 317 0100 DAB2     		uxtb	r2, r3
 318 0102 174B     		ldr	r3, .L16
 319 0104 1A70     		strb	r2, [r3]
 322:main.c        ****        // LED_B_Write(!LED_B_Read());
 323:main.c        ****     if(ProgramProtectionSettings() == FAILURE) 
 320              		.loc 1 323 0
 321 0106 FFF7FEFF 		bl	ProgramProtectionSettings
 322 010a 0346     		mov	r3, r0
 323 010c 002B     		cmp	r3, #0
 324 010e 01D1     		bne	.L14
 324:main.c        ****         return(FAILURE);
 325              		.loc 1 324 0
 326 0110 0023     		movs	r3, #0
 327 0112 23E0     		b	.L8
 328              	.L14:
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 13


 325:main.c        ****     LCD_Char_Position(0,0);
 329              		.loc 1 325 0
 330 0114 0020     		movs	r0, #0
 331 0116 0021     		movs	r1, #0
 332 0118 FFF7FEFF 		bl	LCD_Char_Position
 326:main.c        ****     LCD_Char_PrintString("Prg Protect   OK");
 333              		.loc 1 326 0
 334 011c 1748     		ldr	r0, .L16+28
 335 011e FFF7FEFF 		bl	LCD_Char_PrintString
 327:main.c        **** 
 328:main.c        ****     currentStep++;
 336              		.loc 1 328 0
 337 0122 0F4B     		ldr	r3, .L16
 338 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 339 0126 0133     		adds	r3, r3, #1
 340 0128 DAB2     		uxtb	r2, r3
 341 012a 0D4B     		ldr	r3, .L16
 342 012c 1A70     		strb	r2, [r3]
 329:main.c        ****        // LED_B_Write(!LED_B_Read());
 330:main.c        ****     /* Disable for now since this fails    
 331:main.c        ****     if(VerifyProtectionSettings() == FAILURE)
 332:main.c        ****         return(FAILURE);
 333:main.c        ****     LCD_Char_Position(0,0);
 334:main.c        ****     LCD_Char_PrintString("Verify Prot   OK");
 335:main.c        **** */
 336:main.c        ****     currentStep++;
 343              		.loc 1 336 0
 344 012e 0C4B     		ldr	r3, .L16
 345 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 346 0132 0133     		adds	r3, r3, #1
 347 0134 DAB2     		uxtb	r2, r3
 348 0136 0A4B     		ldr	r3, .L16
 349 0138 1A70     		strb	r2, [r3]
 337:main.c        ****        // LED_B_Write(!LED_B_Read());
 338:main.c        ****     if(VerifyChecksum() == FAILURE) 
 350              		.loc 1 338 0
 351 013a FFF7FEFF 		bl	VerifyChecksum
 352 013e 0346     		mov	r3, r0
 353 0140 002B     		cmp	r3, #0
 354 0142 01D1     		bne	.L15
 339:main.c        ****         return(FAILURE);
 355              		.loc 1 339 0
 356 0144 0023     		movs	r3, #0
 357 0146 09E0     		b	.L8
 358              	.L15:
 340:main.c        ****         LCD_Char_Position(0,0);
 359              		.loc 1 340 0
 360 0148 0020     		movs	r0, #0
 361 014a 0021     		movs	r1, #0
 362 014c FFF7FEFF 		bl	LCD_Char_Position
 341:main.c        ****     LCD_Char_PrintString("Verify ChkSum OK");
 363              		.loc 1 341 0
 364 0150 0B48     		ldr	r0, .L16+32
 365 0152 FFF7FEFF 		bl	LCD_Char_PrintString
 342:main.c        **** 
 343:main.c        ****     ExitProgrammingMode();
 366              		.loc 1 343 0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 14


 367 0156 FFF7FEFF 		bl	ExitProgrammingMode
 344:main.c        ****     
 345:main.c        **** 	/* All the steps were completed successfully */
 346:main.c        ****     return(SUCCESS);
 368              		.loc 1 346 0
 369 015a 0123     		movs	r3, #1
 370              	.L8:
 347:main.c        **** }
 371              		.loc 1 347 0
 372 015c 1846     		mov	r0, r3
 373 015e 80BD     		pop	{r7, pc}
 374              	.L17:
 375              		.align	2
 376              	.L16:
 377 0160 00000000 		.word	currentStep
 378 0164 00000000 		.word	.LC0
 379 0168 14000000 		.word	.LC1
 380 016c 28000000 		.word	.LC2
 381 0170 3C000000 		.word	.LC3
 382 0174 50000000 		.word	.LC4
 383 0178 64000000 		.word	.LC5
 384 017c 78000000 		.word	.LC6
 385 0180 8C000000 		.word	.LC7
 386              		.cfi_endproc
 387              	.LFE64:
 388              		.size	ProgramDevice, .-ProgramDevice
 389              		.text
 390              	.Letext0:
 391              		.file 2 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 392              		.file 3 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 393              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 394              		.section	.debug_info,"",%progbits
 395              	.Ldebug_info0:
 396 0000 20010000 		.4byte	0x120
 397 0004 0400     		.2byte	0x4
 398 0006 00000000 		.4byte	.Ldebug_abbrev0
 399 000a 04       		.byte	0x4
 400 000b 01       		.uleb128 0x1
 401 000c A9000000 		.4byte	.LASF20
 402 0010 01       		.byte	0x1
 403 0011 2E000000 		.4byte	.LASF21
 404 0015 4C010000 		.4byte	.LASF22
 405 0019 00000000 		.4byte	.Ldebug_ranges0+0
 406 001d 00000000 		.4byte	0
 407 0021 00000000 		.4byte	.Ldebug_line0
 408 0025 02       		.uleb128 0x2
 409 0026 01       		.byte	0x1
 410 0027 06       		.byte	0x6
 411 0028 A6010000 		.4byte	.LASF0
 412 002c 02       		.uleb128 0x2
 413 002d 01       		.byte	0x1
 414 002e 08       		.byte	0x8
 415 002f 8D000000 		.4byte	.LASF1
 416 0033 02       		.uleb128 0x2
 417 0034 02       		.byte	0x2
 418 0035 05       		.byte	0x5
 419 0036 CE010000 		.4byte	.LASF2
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 15


 420 003a 02       		.uleb128 0x2
 421 003b 02       		.byte	0x2
 422 003c 07       		.byte	0x7
 423 003d 0E000000 		.4byte	.LASF3
 424 0041 03       		.uleb128 0x3
 425 0042 B2010000 		.4byte	.LASF9
 426 0046 02       		.byte	0x2
 427 0047 3F       		.byte	0x3f
 428 0048 4C000000 		.4byte	0x4c
 429 004c 02       		.uleb128 0x2
 430 004d 04       		.byte	0x4
 431 004e 05       		.byte	0x5
 432 004f A0000000 		.4byte	.LASF4
 433 0053 02       		.uleb128 0x2
 434 0054 04       		.byte	0x4
 435 0055 07       		.byte	0x7
 436 0056 48000000 		.4byte	.LASF5
 437 005a 02       		.uleb128 0x2
 438 005b 08       		.byte	0x8
 439 005c 05       		.byte	0x5
 440 005d 3E010000 		.4byte	.LASF6
 441 0061 02       		.uleb128 0x2
 442 0062 08       		.byte	0x8
 443 0063 07       		.byte	0x7
 444 0064 6A000000 		.4byte	.LASF7
 445 0068 04       		.uleb128 0x4
 446 0069 04       		.byte	0x4
 447 006a 05       		.byte	0x5
 448 006b 696E7400 		.ascii	"int\000"
 449 006f 02       		.uleb128 0x2
 450 0070 04       		.byte	0x4
 451 0071 07       		.byte	0x7
 452 0072 21000000 		.4byte	.LASF8
 453 0076 03       		.uleb128 0x3
 454 0077 D8010000 		.4byte	.LASF10
 455 007b 03       		.byte	0x3
 456 007c 2C       		.byte	0x2c
 457 007d 41000000 		.4byte	0x41
 458 0081 02       		.uleb128 0x2
 459 0082 04       		.byte	0x4
 460 0083 04       		.byte	0x4
 461 0084 BC010000 		.4byte	.LASF11
 462 0088 02       		.uleb128 0x2
 463 0089 08       		.byte	0x8
 464 008a 04       		.byte	0x4
 465 008b 37010000 		.4byte	.LASF12
 466 008f 02       		.uleb128 0x2
 467 0090 01       		.byte	0x1
 468 0091 08       		.byte	0x8
 469 0092 9B000000 		.4byte	.LASF13
 470 0096 02       		.uleb128 0x2
 471 0097 04       		.byte	0x4
 472 0098 07       		.byte	0x7
 473 0099 E0010000 		.4byte	.LASF14
 474 009d 05       		.uleb128 0x5
 475 009e 35000000 		.4byte	.LASF23
 476 00a2 01       		.byte	0x1
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 16


 477 00a3 6C       		.byte	0x6c
 478 00a4 68000000 		.4byte	0x68
 479 00a8 00000000 		.4byte	.LFB63
 480 00ac 96000000 		.4byte	.LFE63-.LFB63
 481 00b0 01       		.uleb128 0x1
 482 00b1 9C       		.byte	0x9c
 483 00b2 EB000000 		.4byte	0xeb
 484 00b6 06       		.uleb128 0x6
 485 00b7 06000000 		.4byte	.LBB2
 486 00bb 8E000000 		.4byte	.LBE2-.LBB2
 487 00bf 07       		.uleb128 0x7
 488 00c0 3A000000 		.4byte	.LASF15
 489 00c4 01       		.byte	0x1
 490 00c5 71       		.byte	0x71
 491 00c6 2C000000 		.4byte	0x2c
 492 00ca 02       		.uleb128 0x2
 493 00cb 91       		.byte	0x91
 494 00cc 77       		.sleb128 -9
 495 00cd 07       		.uleb128 0x7
 496 00ce 81000000 		.4byte	.LASF16
 497 00d2 01       		.byte	0x1
 498 00d3 74       		.byte	0x74
 499 00d4 2C000000 		.4byte	0x2c
 500 00d8 02       		.uleb128 0x2
 501 00d9 91       		.byte	0x91
 502 00da 76       		.sleb128 -10
 503 00db 07       		.uleb128 0x7
 504 00dc 5A000000 		.4byte	.LASF17
 505 00e0 01       		.byte	0x1
 506 00e1 78       		.byte	0x78
 507 00e2 2C000000 		.4byte	0x2c
 508 00e6 02       		.uleb128 0x2
 509 00e7 91       		.byte	0x91
 510 00e8 75       		.sleb128 -11
 511 00e9 00       		.byte	0
 512 00ea 00       		.byte	0
 513 00eb 08       		.uleb128 0x8
 514 00ec 00000000 		.4byte	.LASF24
 515 00f0 01       		.byte	0x1
 516 00f1 1301     		.2byte	0x113
 517 00f3 2C000000 		.4byte	0x2c
 518 00f7 00000000 		.4byte	.LFB64
 519 00fb 84010000 		.4byte	.LFE64-.LFB64
 520 00ff 01       		.uleb128 0x1
 521 0100 9C       		.byte	0x9c
 522 0101 09       		.uleb128 0x9
 523 0102 99010000 		.4byte	.LASF18
 524 0106 04       		.byte	0x4
 525 0107 9606     		.2byte	0x696
 526 0109 0D010000 		.4byte	0x10d
 527 010d 0A       		.uleb128 0xa
 528 010e 76000000 		.4byte	0x76
 529 0112 0B       		.uleb128 0xb
 530 0113 C2010000 		.4byte	.LASF19
 531 0117 01       		.byte	0x1
 532 0118 4E       		.byte	0x4e
 533 0119 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 17


 534 011d 05       		.uleb128 0x5
 535 011e 03       		.byte	0x3
 536 011f 00000000 		.4byte	currentStep
 537 0123 00       		.byte	0
 538              		.section	.debug_abbrev,"",%progbits
 539              	.Ldebug_abbrev0:
 540 0000 01       		.uleb128 0x1
 541 0001 11       		.uleb128 0x11
 542 0002 01       		.byte	0x1
 543 0003 25       		.uleb128 0x25
 544 0004 0E       		.uleb128 0xe
 545 0005 13       		.uleb128 0x13
 546 0006 0B       		.uleb128 0xb
 547 0007 03       		.uleb128 0x3
 548 0008 0E       		.uleb128 0xe
 549 0009 1B       		.uleb128 0x1b
 550 000a 0E       		.uleb128 0xe
 551 000b 55       		.uleb128 0x55
 552 000c 17       		.uleb128 0x17
 553 000d 11       		.uleb128 0x11
 554 000e 01       		.uleb128 0x1
 555 000f 10       		.uleb128 0x10
 556 0010 17       		.uleb128 0x17
 557 0011 00       		.byte	0
 558 0012 00       		.byte	0
 559 0013 02       		.uleb128 0x2
 560 0014 24       		.uleb128 0x24
 561 0015 00       		.byte	0
 562 0016 0B       		.uleb128 0xb
 563 0017 0B       		.uleb128 0xb
 564 0018 3E       		.uleb128 0x3e
 565 0019 0B       		.uleb128 0xb
 566 001a 03       		.uleb128 0x3
 567 001b 0E       		.uleb128 0xe
 568 001c 00       		.byte	0
 569 001d 00       		.byte	0
 570 001e 03       		.uleb128 0x3
 571 001f 16       		.uleb128 0x16
 572 0020 00       		.byte	0
 573 0021 03       		.uleb128 0x3
 574 0022 0E       		.uleb128 0xe
 575 0023 3A       		.uleb128 0x3a
 576 0024 0B       		.uleb128 0xb
 577 0025 3B       		.uleb128 0x3b
 578 0026 0B       		.uleb128 0xb
 579 0027 49       		.uleb128 0x49
 580 0028 13       		.uleb128 0x13
 581 0029 00       		.byte	0
 582 002a 00       		.byte	0
 583 002b 04       		.uleb128 0x4
 584 002c 24       		.uleb128 0x24
 585 002d 00       		.byte	0
 586 002e 0B       		.uleb128 0xb
 587 002f 0B       		.uleb128 0xb
 588 0030 3E       		.uleb128 0x3e
 589 0031 0B       		.uleb128 0xb
 590 0032 03       		.uleb128 0x3
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 18


 591 0033 08       		.uleb128 0x8
 592 0034 00       		.byte	0
 593 0035 00       		.byte	0
 594 0036 05       		.uleb128 0x5
 595 0037 2E       		.uleb128 0x2e
 596 0038 01       		.byte	0x1
 597 0039 3F       		.uleb128 0x3f
 598 003a 19       		.uleb128 0x19
 599 003b 03       		.uleb128 0x3
 600 003c 0E       		.uleb128 0xe
 601 003d 3A       		.uleb128 0x3a
 602 003e 0B       		.uleb128 0xb
 603 003f 3B       		.uleb128 0x3b
 604 0040 0B       		.uleb128 0xb
 605 0041 49       		.uleb128 0x49
 606 0042 13       		.uleb128 0x13
 607 0043 11       		.uleb128 0x11
 608 0044 01       		.uleb128 0x1
 609 0045 12       		.uleb128 0x12
 610 0046 06       		.uleb128 0x6
 611 0047 40       		.uleb128 0x40
 612 0048 18       		.uleb128 0x18
 613 0049 9642     		.uleb128 0x2116
 614 004b 19       		.uleb128 0x19
 615 004c 01       		.uleb128 0x1
 616 004d 13       		.uleb128 0x13
 617 004e 00       		.byte	0
 618 004f 00       		.byte	0
 619 0050 06       		.uleb128 0x6
 620 0051 0B       		.uleb128 0xb
 621 0052 01       		.byte	0x1
 622 0053 11       		.uleb128 0x11
 623 0054 01       		.uleb128 0x1
 624 0055 12       		.uleb128 0x12
 625 0056 06       		.uleb128 0x6
 626 0057 00       		.byte	0
 627 0058 00       		.byte	0
 628 0059 07       		.uleb128 0x7
 629 005a 34       		.uleb128 0x34
 630 005b 00       		.byte	0
 631 005c 03       		.uleb128 0x3
 632 005d 0E       		.uleb128 0xe
 633 005e 3A       		.uleb128 0x3a
 634 005f 0B       		.uleb128 0xb
 635 0060 3B       		.uleb128 0x3b
 636 0061 0B       		.uleb128 0xb
 637 0062 49       		.uleb128 0x49
 638 0063 13       		.uleb128 0x13
 639 0064 02       		.uleb128 0x2
 640 0065 18       		.uleb128 0x18
 641 0066 00       		.byte	0
 642 0067 00       		.byte	0
 643 0068 08       		.uleb128 0x8
 644 0069 2E       		.uleb128 0x2e
 645 006a 00       		.byte	0
 646 006b 3F       		.uleb128 0x3f
 647 006c 19       		.uleb128 0x19
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 19


 648 006d 03       		.uleb128 0x3
 649 006e 0E       		.uleb128 0xe
 650 006f 3A       		.uleb128 0x3a
 651 0070 0B       		.uleb128 0xb
 652 0071 3B       		.uleb128 0x3b
 653 0072 05       		.uleb128 0x5
 654 0073 27       		.uleb128 0x27
 655 0074 19       		.uleb128 0x19
 656 0075 49       		.uleb128 0x49
 657 0076 13       		.uleb128 0x13
 658 0077 11       		.uleb128 0x11
 659 0078 01       		.uleb128 0x1
 660 0079 12       		.uleb128 0x12
 661 007a 06       		.uleb128 0x6
 662 007b 40       		.uleb128 0x40
 663 007c 18       		.uleb128 0x18
 664 007d 9642     		.uleb128 0x2116
 665 007f 19       		.uleb128 0x19
 666 0080 00       		.byte	0
 667 0081 00       		.byte	0
 668 0082 09       		.uleb128 0x9
 669 0083 34       		.uleb128 0x34
 670 0084 00       		.byte	0
 671 0085 03       		.uleb128 0x3
 672 0086 0E       		.uleb128 0xe
 673 0087 3A       		.uleb128 0x3a
 674 0088 0B       		.uleb128 0xb
 675 0089 3B       		.uleb128 0x3b
 676 008a 05       		.uleb128 0x5
 677 008b 49       		.uleb128 0x49
 678 008c 13       		.uleb128 0x13
 679 008d 3F       		.uleb128 0x3f
 680 008e 19       		.uleb128 0x19
 681 008f 3C       		.uleb128 0x3c
 682 0090 19       		.uleb128 0x19
 683 0091 00       		.byte	0
 684 0092 00       		.byte	0
 685 0093 0A       		.uleb128 0xa
 686 0094 35       		.uleb128 0x35
 687 0095 00       		.byte	0
 688 0096 49       		.uleb128 0x49
 689 0097 13       		.uleb128 0x13
 690 0098 00       		.byte	0
 691 0099 00       		.byte	0
 692 009a 0B       		.uleb128 0xb
 693 009b 34       		.uleb128 0x34
 694 009c 00       		.byte	0
 695 009d 03       		.uleb128 0x3
 696 009e 0E       		.uleb128 0xe
 697 009f 3A       		.uleb128 0x3a
 698 00a0 0B       		.uleb128 0xb
 699 00a1 3B       		.uleb128 0x3b
 700 00a2 0B       		.uleb128 0xb
 701 00a3 49       		.uleb128 0x49
 702 00a4 13       		.uleb128 0x13
 703 00a5 3F       		.uleb128 0x3f
 704 00a6 19       		.uleb128 0x19
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 20


 705 00a7 02       		.uleb128 0x2
 706 00a8 18       		.uleb128 0x18
 707 00a9 00       		.byte	0
 708 00aa 00       		.byte	0
 709 00ab 00       		.byte	0
 710              		.section	.debug_aranges,"",%progbits
 711 0000 24000000 		.4byte	0x24
 712 0004 0200     		.2byte	0x2
 713 0006 00000000 		.4byte	.Ldebug_info0
 714 000a 04       		.byte	0x4
 715 000b 00       		.byte	0
 716 000c 0000     		.2byte	0
 717 000e 0000     		.2byte	0
 718 0010 00000000 		.4byte	.LFB63
 719 0014 96000000 		.4byte	.LFE63-.LFB63
 720 0018 00000000 		.4byte	.LFB64
 721 001c 84010000 		.4byte	.LFE64-.LFB64
 722 0020 00000000 		.4byte	0
 723 0024 00000000 		.4byte	0
 724              		.section	.debug_ranges,"",%progbits
 725              	.Ldebug_ranges0:
 726 0000 00000000 		.4byte	.LFB63
 727 0004 96000000 		.4byte	.LFE63
 728 0008 00000000 		.4byte	.LFB64
 729 000c 84010000 		.4byte	.LFE64
 730 0010 00000000 		.4byte	0
 731 0014 00000000 		.4byte	0
 732              		.section	.debug_line,"",%progbits
 733              	.Ldebug_line0:
 734 0000 B1010000 		.section	.debug_str,"MS",%progbits,1
 734      02002E01 
 734      00000201 
 734      FB0E0D00 
 734      01010101 
 735              	.LASF24:
 736 0000 50726F67 		.ascii	"ProgramDevice\000"
 736      72616D44 
 736      65766963 
 736      6500
 737              	.LASF3:
 738 000e 73686F72 		.ascii	"short unsigned int\000"
 738      7420756E 
 738      7369676E 
 738      65642069 
 738      6E7400
 739              	.LASF8:
 740 0021 756E7369 		.ascii	"unsigned int\000"
 740      676E6564 
 740      20696E74 
 740      00
 741              	.LASF21:
 742 002e 6D61696E 		.ascii	"main.c\000"
 742      2E6300
 743              	.LASF23:
 744 0035 6D61696E 		.ascii	"main\000"
 744      00
 745              	.LASF15:
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 21


 746 003a 70726F67 		.ascii	"programResult\000"
 746      72616D52 
 746      6573756C 
 746      7400
 747              	.LASF5:
 748 0048 6C6F6E67 		.ascii	"long unsigned int\000"
 748      20756E73 
 748      69676E65 
 748      6420696E 
 748      7400
 749              	.LASF17:
 750 005a 73726F6D 		.ascii	"sromErrorStatus\000"
 750      4572726F 
 750      72537461 
 750      74757300 
 751              	.LASF7:
 752 006a 6C6F6E67 		.ascii	"long long unsigned int\000"
 752      206C6F6E 
 752      6720756E 
 752      7369676E 
 752      65642069 
 753              	.LASF16:
 754 0081 6572726F 		.ascii	"errorStatus\000"
 754      72537461 
 754      74757300 
 755              	.LASF1:
 756 008d 756E7369 		.ascii	"unsigned char\000"
 756      676E6564 
 756      20636861 
 756      7200
 757              	.LASF13:
 758 009b 63686172 		.ascii	"char\000"
 758      00
 759              	.LASF4:
 760 00a0 6C6F6E67 		.ascii	"long int\000"
 760      20696E74 
 760      00
 761              	.LASF20:
 762 00a9 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 762      4320342E 
 762      392E3320 
 762      32303135 
 762      30333033 
 763 00dc 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 763      20726576 
 763      6973696F 
 763      6E203232 
 763      31323230 
 764 010f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 764      66756E63 
 764      74696F6E 
 764      2D736563 
 764      74696F6E 
 765              	.LASF12:
 766 0137 646F7562 		.ascii	"double\000"
 766      6C6500
 767              	.LASF6:
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccFUVeAb.s 			page 22


 768 013e 6C6F6E67 		.ascii	"long long int\000"
 768      206C6F6E 
 768      6720696E 
 768      7400
 769              	.LASF22:
 770 014c 443A5C55 		.ascii	"D:\\Users\\WorkBench\\Documents\\GitHub\\BackboneHS"
 770      73657273 
 770      5C576F72 
 770      6B42656E 
 770      63685C44 
 771 017a 53505C50 		.ascii	"SP\\Programmer\\Programmer.cydsn\000"
 771      726F6772 
 771      616D6D65 
 771      725C5072 
 771      6F677261 
 772              	.LASF18:
 773 0199 49544D5F 		.ascii	"ITM_RxBuffer\000"
 773      52784275 
 773      66666572 
 773      00
 774              	.LASF0:
 775 01a6 7369676E 		.ascii	"signed char\000"
 775      65642063 
 775      68617200 
 776              	.LASF9:
 777 01b2 5F5F696E 		.ascii	"__int32_t\000"
 777      7433325F 
 777      7400
 778              	.LASF11:
 779 01bc 666C6F61 		.ascii	"float\000"
 779      7400
 780              	.LASF19:
 781 01c2 63757272 		.ascii	"currentStep\000"
 781      656E7453 
 781      74657000 
 782              	.LASF2:
 783 01ce 73686F72 		.ascii	"short int\000"
 783      7420696E 
 783      7400
 784              	.LASF10:
 785 01d8 696E7433 		.ascii	"int32_t\000"
 785      325F7400 
 786              	.LASF14:
 787 01e0 73697A65 		.ascii	"sizetype\000"
 787      74797065 
 787      00
 788              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
