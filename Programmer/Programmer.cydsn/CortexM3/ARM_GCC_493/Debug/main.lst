ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	currentStep,1,1
  19              		.section	.text.main,"ax",%progbits
  20              		.align	2
  21              		.global	main
  22              		.thumb
  23              		.thumb_func
  24              		.type	main, %function
  25              	main:
  26              	.LFB63:
  27              		.file 1 "main.c"
   1:main.c        **** /******************************************************************************
   2:main.c        **** 
   3:main.c        **** 
   4:main.c        **** *******************************************************************************
   5:main.c        **** *  Project Name: A_Hssp_Programmer
   6:main.c        **** *  Project Revision: 1.00
   7:main.c        **** *  Software Version: PSoC Creator 3.3
   8:main.c        **** *  Device Tested: CY8C5868AXI-LP035
   9:main.c        **** *  Compilers Tested: ARM GCC 4.9-2015-q1-update
  10:main.c        **** *  Related Hardware: CY8CKIT-050
  11:main.c        **** ******************************************************************************/
  12:main.c        **** 
  13:main.c        **** /******************************************************************************
  14:main.c        **** * Project Description:
  15:main.c        **** * This is a sample HSSP implmentation demonstrating a PSoC 5LP programming
  16:main.c        **** * PSoC 4. The project is tested using CY8CKIT-050 with PSoC 5LP chip and 
  17:main.c        **** * CY8CKIT-001 with PSoC 4 processor module.
  18:main.c        **** *
  19:main.c        **** * Connections Required
  20:main.c        **** * CY8CKIT-050 (PSoC 5LP DVK) :
  21:main.c        **** *  Pin_SWDIO (P0[0])- This pin is connected to SWDIO (Debug pin) of PSoC 4 kit.
  22:main.c        **** *  Pin_SWDCK (P0[1])- This pin is connected to SWDCK (Debug pin) of PSoC 4 kit.
  23:main.c        **** *  Pin_XRES  (P0[2])- This pin is connected to XRES input of PSoC kit.
  24:main.c        **** *  Pin_Start (P6[1])- This pin is internally connected to switch SW2.
  25:main.c        **** *
  26:main.c        **** * Note that the GNDs of both DVKs should be connected together and Power should
  27:main.c        **** * be supplied from a single source.
  28:main.c        **** *
  29:main.c        **** * The hex file included in this project toggles pin P1[6] of PSoC 4 at 1Hz
  30:main.c        **** * frequency and displays “PSoC Programmed” on the character LCD mounted on
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 2


  31:main.c        **** * CY8CKIT-001 DVK.
  32:main.c        **** * 
  33:main.c        **** * Connections required on the CY8CKIT-001 with PSoC 4 Processor Module :
  34:main.c        **** * 	1. Connect P1[6] to LED1
  35:main.c        **** *	2. Mount character LCD on the kit
  36:main.c        **** *
  37:main.c        **** * Press SW2 on the PSoC 5LP DVK to start the programming operation.
  38:main.c        **** * ProgramDevice() function in main.c calls all the programming steps
  39:main.c        **** * sequentially to program PSoC 4.
  40:main.c        **** *
  41:main.c        **** * main.c checks the result of ProgramDevice() function and if it returns 
  42:main.c        **** * SUCCESS, "HSSP Success" is displayed on the character LCD mounted on the
  43:main.c        **** * PSoC 5LP kit. If ProgramDevice() returns failure, Step of failure, Reason
  44:main.c        **** * of failure is displayed on the LCD. If the error is because of SROM, It
  45:main.c        **** * displays the SROM error code.
  46:main.c        **** *
  47:main.c        **** * On the PSoC 4 Side, LED connected to P1[6] starts to toggle at 1 Hz
  48:main.c        **** * frequency and character LCD displays the message after successful 
  49:main.c        **** * programming.
  50:main.c        **** *
  51:main.c        **** * Note:
  52:main.c        **** *  The Character LCD functions and the Pin_Start APIs in the main() function
  53:main.c        **** *  are for PSoC 5LP host programmer. If you are using any other microcontroller,
  54:main.c        **** *  replace the functions with the APIs supported by the host or change the macro
  55:main.c        **** *  USE_LCD and USE_START_PIN to 0 to remove all LCD and Pin_Start functions.
  56:main.c        **** ******************************************************************************/
  57:main.c        **** 
  58:main.c        **** /* This file is included for calling Character LCD and Pin_Start APIs in
  59:main.c        ****    PSoC 5LP. Remove this header file while porting to non PSoC 5LP host
  60:main.c        ****    programmer */
  61:main.c        **** #include <device.h>
  62:main.c        **** 
  63:main.c        **** #include <project.h>
  64:main.c        **** 
  65:main.c        **** /* These macros are used to remove all LCD and Pin_Start functions while
  66:main.c        ****    porting this code to non PSoC 5LP host programmer */
  67:main.c        **** #define USE_LCD 		0
  68:main.c        **** #define USE_START_PIN 	1
  69:main.c        **** 
  70:main.c        **** /* This file has the top level HSSP routines that should be called from main
  71:main.c        ****    application code */
  72:main.c        **** #include "ProgrammingSteps.h"
  73:main.c        **** 
  74:main.c        **** /* Function which sequentially calls all the programming steps */
  75:main.c        **** unsigned char ProgramDevice(void);
  76:main.c        **** 
  77:main.c        **** /* Global variable which stores the current programming step under execution */
  78:main.c        **** unsigned char currentStep;
  79:main.c        **** 
  80:main.c        **** /* Slave address of the EZI2C */
  81:main.c        **** //#define EZI2C_SLAVE_ADDR        (0x08u)
  82:main.c        **** //#define BUFFER_SIZE             (0x04u)
  83:main.c        **** //#define BUFFER_RW_AREA_SIZE     (0x02u)
  84:main.c        **** 
  85:main.c        **** /* Denotes the offset inside the EZI2C buffer */
  86:main.c        **** //#define SLAVE_ADDR_SIZE         (0x01u)
  87:main.c        **** 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 3


  88:main.c        **** //#define ACTION_SELECT_NONE      (0x00u)     /* Do nothing       */
  89:main.c        **** //#define ACTION_SELECT_WRITE     (0x01u)     /* Write to EZI2C   */
  90:main.c        **** //#define ACTION_SELECT_READ      (0x02u)     /* Read from EZI2C  */
  91:main.c        **** 
  92:main.c        **** /* Desing interrupt handlers for SW1 and SW2 event */
  93:main.c        **** CY_ISR_PROTO(ISR_WriteSW1_Interrupt);
  94:main.c        **** CY_ISR_PROTO(ISR_ReadSW2_Interrupt);
  95:main.c        **** 
  96:main.c        **** /* EZI2C buffer */
  97:main.c        **** //uint8   ezi2cBuffer[BUFFER_SIZE];
  98:main.c        **** 
  99:main.c        **** /* I2C buffer with the data read from EZI2C */
 100:main.c        **** //uint8   i2cBufferRead[BUFFER_SIZE];
 101:main.c        **** 
 102:main.c        **** /* I2C buffer with the data to be written to EZI2C */
 103:main.c        **** //uint8   i2cBufferWrite[SLAVE_ADDR_SIZE + BUFFER_SIZE];
 104:main.c        **** 
 105:main.c        **** /* Initialize action variable */
 106:main.c        **** //volatile uint8 actionSelect = ACTION_SELECT_NONE;
 107:main.c        **** 
 108:main.c        **** int main()
 109:main.c        **** {
  28              		.loc 1 109 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40              	.L5:
  41              	.LBB2:
 110:main.c        ****     for( ; ; )
 111:main.c        ****     {
 112:main.c        ****     /* Variable to store the result of HSSP operation */
 113:main.c        ****     unsigned char programResult;   
 114:main.c        **** 	
 115:main.c        **** 	/* Variable to store the HSSP Error status in case of failure */
 116:main.c        ****     unsigned char errorStatus; 
 117:main.c        **** 	
 118:main.c        **** 	/* Variable to store the SROM Error status if errorStatus contains
 119:main.c        **** 	   SROM_TIMEOUT_ERROR error */
 120:main.c        ****     unsigned char sromErrorStatus;
 121:main.c        ****         
 122:main.c        ****     Pin_Power_Write(1); //Turn Relay OFF on Power Up
  42              		.loc 1 122 0
  43 0006 0120     		movs	r0, #1
  44 0008 FFF7FEFF 		bl	Pin_Power_Write
 123:main.c        **** 	
 124:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 125:main.c        **** 	if(USE_LCD)
 126:main.c        **** 	{
 127:main.c        **** 		/* Initialize Character LCD  */
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 4


 128:main.c        **** 	    LCD_Char_Start();
 129:main.c        **** 		
 130:main.c        **** 		/* Display the message */
 131:main.c        **** 		LCD_Char_Position(0,0);
 132:main.c        **** 		LCD_Char_PrintString("Press SWITCH SW2");
 133:main.c        **** 	}
 134:main.c        ****     
 135:main.c        **** 	/* Set USE_START_PIN macro to 0 if PSoC 5LP is not used as host
 136:main.c        **** 	   microcontroller */
 137:main.c        **** 	if(USE_START_PIN)
 138:main.c        **** 	{
 139:main.c        **** 		while (Pin_Start_Read() == 1);
  45              		.loc 1 139 0
  46 000c 00BF     		nop
  47              	.L2:
  48              		.loc 1 139 0 is_stmt 0 discriminator 1
  49 000e FFF7FEFF 		bl	Pin_Start_Read
  50 0012 0346     		mov	r3, r0
  51 0014 012B     		cmp	r3, #1
  52 0016 FAD0     		beq	.L2
 140:main.c        **** 	}
 141:main.c        **** 	
 142:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 143:main.c        **** 	if(USE_LCD)
 144:main.c        **** 	{
 145:main.c        **** 		/* Clear Character LCD  */
 146:main.c        **** 		LCD_Char_ClearDisplay();
 147:main.c        **** 		
 148:main.c        **** 		/* Display the message */
 149:main.c        **** 	    LCD_Char_Position(0,0);
 150:main.c        **** 	    LCD_Char_PrintString("Programming PSoC4");
 151:main.c        **** 	}
 152:main.c        ****     
 153:main.c        ****     LED_R_Write(0);
  53              		.loc 1 153 0 is_stmt 1
  54 0018 0020     		movs	r0, #0
  55 001a FFF7FEFF 		bl	LED_R_Write
 154:main.c        ****     LED_G_Write(0);
  56              		.loc 1 154 0
  57 001e 0020     		movs	r0, #0
  58 0020 FFF7FEFF 		bl	LED_G_Write
 155:main.c        ****     LED_B_Write(0);
  59              		.loc 1 155 0
  60 0024 0020     		movs	r0, #0
  61 0026 FFF7FEFF 		bl	LED_B_Write
 156:main.c        ****     LED_R_GND_Write(0);
  62              		.loc 1 156 0
  63 002a 0020     		movs	r0, #0
  64 002c FFF7FEFF 		bl	LED_R_GND_Write
 157:main.c        ****     /* Write a byte to a Control Register */
 158:main.c        ****     Control_Reg_Write(0x00u); //Enables PWM
  65              		.loc 1 158 0
  66 0030 0020     		movs	r0, #0
  67 0032 FFF7FEFF 		bl	Control_Reg_Write
 159:main.c        ****     PWM_Start();
  68              		.loc 1 159 0
  69 0036 FFF7FEFF 		bl	PWM_Start
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 5


 160:main.c        ****     // Set SWDCK low initially because high bleeds though & powers board
 161:main.c        ****     Pin_SWDCK_Write(0);
  70              		.loc 1 161 0
  71 003a 0020     		movs	r0, #0
  72 003c FFF7FEFF 		bl	Pin_SWDCK_Write
 162:main.c        ****     Pin_SWDIO_Write(0);
  73              		.loc 1 162 0
  74 0040 0020     		movs	r0, #0
  75 0042 FFF7FEFF 		bl	Pin_SWDIO_Write
 163:main.c        ****        
 164:main.c        ****     /* Start EZI2C */
 165:main.c        ****    // EZI2C_Start();
 166:main.c        ****     
 167:main.c        ****     /* Enable global interrupts */
 168:main.c        ****     CyGlobalIntEnable;
  76              		.loc 1 168 0
  77              	@ 168 "main.c" 1
  78 0046 62B6     		CPSIE   i
  79              	@ 0 "" 2
 169:main.c        ****     
 170:main.c        ****     /* Initialize EZI2C buffer's read only data */
 171:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE     ] = 0xAAu;
 172:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE + 1u] = 0xBBu;
 173:main.c        **** 
 174:main.c        ****     /***************************************************************************
 175:main.c        ****     * The first parameter sets the size of the exposed memory to the I2C
 176:main.c        ****     * interface. In this case, it is the entire array. The second parameter sets
 177:main.c        ****     * the boundary between the read/write and read only areas by setting the
 178:main.c        ****     * number of bytes in the read/write area. The read/write area is first,
 179:main.c        ****     * followed by the read only area. In this case, only the first
 180:main.c        ****     * BUFFER_RW_AREA_SIZE bytes may be written, but all bytes may be read by the
 181:main.c        ****     * I2C master. The third parameter is a pointer to the data.
 182:main.c        ****     ***************************************************************************/
 183:main.c        ****     //EZI2C_SetBuffer1(BUFFER_SIZE, BUFFER_RW_AREA_SIZE, (void *) ezi2cBuffer);
 184:main.c        **** 
 185:main.c        **** 
 186:main.c        ****     /* Start the HSSP Programming and store the status */
 187:main.c        ****     Pin_Power_Write(0); //Turn relay on to power DUT, active low
  80              		.loc 1 187 0
  81              		.thumb
  82 0048 0020     		movs	r0, #0
  83 004a FFF7FEFF 		bl	Pin_Power_Write
 188:main.c        ****     programResult = ProgramDevice();
  84              		.loc 1 188 0
  85 004e FFF7FEFF 		bl	ProgramDevice
  86 0052 0346     		mov	r3, r0
  87 0054 FB71     		strb	r3, [r7, #7]
 189:main.c        ****     
 190:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 191:main.c        **** 	if(USE_LCD)
 192:main.c        **** 	{
 193:main.c        **** 	    /* Character LCD will display the status of HSSP Programming  */
 194:main.c        **** 	    LCD_Char_ClearDisplay();
 195:main.c        **** 	}
 196:main.c        ****     /* Write a byte to a Control Register */
 197:main.c        ****     Control_Reg_Write(0x01u); //Kills PWM
  88              		.loc 1 197 0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 6


  89 0056 0120     		movs	r0, #1
  90 0058 FFF7FEFF 		bl	Control_Reg_Write
 198:main.c        ****     PWM_Stop();
  91              		.loc 1 198 0
  92 005c FFF7FEFF 		bl	PWM_Stop
 199:main.c        ****     LED_B_Write(0); //Turn Blue LED OFF
  93              		.loc 1 199 0
  94 0060 0020     		movs	r0, #0
  95 0062 FFF7FEFF 		bl	LED_B_Write
 200:main.c        ****     
 201:main.c        **** 	/* HSSP completed successfully */
 202:main.c        ****     if(programResult == SUCCESS) 
  96              		.loc 1 202 0
  97 0066 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  98 0068 012B     		cmp	r3, #1
  99 006a 03D1     		bne	.L3
 203:main.c        ****     {
 204:main.c        **** 
 205:main.c        ****         LED_G_Write(1);
 100              		.loc 1 205 0
 101 006c 0120     		movs	r0, #1
 102 006e FFF7FEFF 		bl	LED_G_Write
 103 0072 12E0     		b	.L4
 104              	.L3:
 206:main.c        ****         
 207:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 208:main.c        ****         if(USE_LCD)
 209:main.c        **** 		{
 210:main.c        **** 			LCD_Char_Position(0,0);
 211:main.c        ****         	LCD_Char_PrintString("HSSP Success");
 212:main.c        ****     	}
 213:main.c        **** 	}
 214:main.c        **** 	
 215:main.c        **** 	/* HSSP Failure */
 216:main.c        ****     else
 217:main.c        ****     {
 218:main.c        ****         LED_R_Write(1);
 105              		.loc 1 218 0
 106 0074 0120     		movs	r0, #1
 107 0076 FFF7FEFF 		bl	LED_R_Write
 219:main.c        ****         LED_R_GND_Write(0);
 108              		.loc 1 219 0
 109 007a 0020     		movs	r0, #0
 110 007c FFF7FEFF 		bl	LED_R_GND_Write
 220:main.c        **** 
 221:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 222:main.c        ****         if(USE_LCD)
 223:main.c        **** 		{
 224:main.c        **** 			/* Display the step number where the HSSP failed */
 225:main.c        **** 	        LCD_Char_Position(0,0);
 226:main.c        **** 	        LCD_Char_PrintString("HSSP Fail Step");
 227:main.c        **** 	        LCD_Char_PrintInt8(currentStep);
 228:main.c        **** 		}
 229:main.c        ****         		
 230:main.c        ****         /* Get the HSSP error status and display on THE LCD */
 231:main.c        ****         errorStatus = ReadHsspErrorStatus();
 111              		.loc 1 231 0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 7


 112 0080 FFF7FEFF 		bl	ReadHsspErrorStatus
 113 0084 0346     		mov	r3, r0
 114 0086 BB71     		strb	r3, [r7, #6]
 232:main.c        ****         
 233:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 234:main.c        **** 		if(USE_LCD)
 235:main.c        **** 		{
 236:main.c        **** 	        LCD_Char_Position(1,0);
 237:main.c        **** 	        LCD_Char_PrintString("Err ");
 238:main.c        **** 	        LCD_Char_PrintInt8(errorStatus);
 239:main.c        **** 		}
 240:main.c        ****         
 241:main.c        ****         /* If the errorStatus contains THE SROM_TIMEOUT_ERROR error condition,
 242:main.c        ****            read the Status Code returned by CPUSS_SYSARG register and display
 243:main.c        **** 		   on THE LCD */
 244:main.c        ****         if(errorStatus & SROM_TIMEOUT_ERROR)
 115              		.loc 1 244 0
 116 0088 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 117 008a 03F02003 		and	r3, r3, #32
 118 008e 002B     		cmp	r3, #0
 119 0090 03D0     		beq	.L4
 245:main.c        ****         {
 246:main.c        ****             sromErrorStatus = ReadSromStatus();
 120              		.loc 1 246 0
 121 0092 FFF7FEFF 		bl	ReadSromStatus
 122 0096 0346     		mov	r3, r0
 123 0098 7B71     		strb	r3, [r7, #5]
 124              	.L4:
 247:main.c        ****             
 248:main.c        **** 			/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 249:main.c        **** 			if(USE_LCD)
 250:main.c        **** 			{
 251:main.c        **** 				LCD_Char_PrintString(" SROM ");
 252:main.c        **** 				LCD_Char_PrintInt8(sromErrorStatus);
 253:main.c        **** 			}
 254:main.c        ****         }
 255:main.c        ****     }
 256:main.c        ****     Pin_SWDCK_Write(0); //Leaving high causes bleed through & powers device
 125              		.loc 1 256 0
 126 009a 0020     		movs	r0, #0
 127 009c FFF7FEFF 		bl	Pin_SWDCK_Write
 257:main.c        ****     Pin_Power_Write(1); //Done programming power DUT OFF
 128              		.loc 1 257 0
 129 00a0 0120     		movs	r0, #1
 130 00a2 FFF7FEFF 		bl	Pin_Power_Write
 258:main.c        ****     Pin_XRES_SetDriveMode(Pin_XRES_DM_ALG_HIZ);
 131              		.loc 1 258 0
 132 00a6 0020     		movs	r0, #0
 133 00a8 FFF7FEFF 		bl	Pin_XRES_SetDriveMode
 134              	.LBE2:
 259:main.c        **** 
 260:main.c        **** 
 261:main.c        ****         /* Do Nothing */
 262:main.c        ****     }
 135              		.loc 1 262 0
 136 00ac ABE7     		b	.L5
 137              		.cfi_endproc
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 8


 138              	.LFE63:
 139              		.size	main, .-main
 140 00ae 00BF     		.section	.rodata
 141              		.align	2
 142              	.LC0:
 143 0000 44657620 		.ascii	"Dev Acquire   OK\000"
 143      41637175 
 143      69726520 
 143      20204F4B 
 143      00
 144 0011 000000   		.align	2
 145              	.LC1:
 146 0014 56657269 		.ascii	"Verify Sil    OK\000"
 146      66792053 
 146      696C2020 
 146      20204F4B 
 146      00
 147 0025 000000   		.align	2
 148              	.LC2:
 149 0028 45726173 		.ascii	"Erase All     OK\000"
 149      6520416C 
 149      6C202020 
 149      20204F4B 
 149      00
 150 0039 000000   		.align	2
 151              	.LC3:
 152 003c 43686B53 		.ascii	"ChkSumPrv     OK\000"
 152      756D5072 
 152      76202020 
 152      20204F4B 
 152      00
 153 004d 000000   		.align	2
 154              	.LC4:
 155 0050 50726F67 		.ascii	"Program Flash OK\000"
 155      72616D20 
 155      466C6173 
 155      68204F4B 
 155      00
 156 0061 000000   		.align	2
 157              	.LC5:
 158 0064 56657269 		.ascii	"Verify Flash  OK\000"
 158      66792046 
 158      6C617368 
 158      20204F4B 
 158      00
 159 0075 000000   		.align	2
 160              	.LC6:
 161 0078 50726720 		.ascii	"Prg Protect   OK\000"
 161      50726F74 
 161      65637420 
 161      20204F4B 
 161      00
 162 0089 000000   		.align	2
 163              	.LC7:
 164 008c 56657269 		.ascii	"Verify ChkSum OK\000"
 164      66792043 
 164      686B5375 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 9


 164      6D204F4B 
 164      00
 165 009d 000000   		.section	.text.ProgramDevice,"ax",%progbits
 166              		.align	2
 167              		.global	ProgramDevice
 168              		.thumb
 169              		.thumb_func
 170              		.type	ProgramDevice, %function
 171              	ProgramDevice:
 172              	.LFB64:
 263:main.c        **** }
 264:main.c        **** 
 265:main.c        **** /******************************************************************************
 266:main.c        **** * Function Name: unsigned char ProgramDevice(void)
 267:main.c        **** *******************************************************************************
 268:main.c        **** * Summary:
 269:main.c        **** *  This function sequentially calls all the functions required to program a
 270:main.c        **** *  PSoC 4. These functions are defined in ProgrammingSteps.h.
 271:main.c        **** *
 272:main.c        **** * Parameters:
 273:main.c        **** *  None.
 274:main.c        **** *
 275:main.c        **** * Return:
 276:main.c        **** *  SUCCESS - All the programming steps executed successfully
 277:main.c        **** *  FAILURE - HSSP programming fails in any one of the programming step
 278:main.c        **** *
 279:main.c        **** ******************************************************************************/
 280:main.c        **** unsigned char ProgramDevice()
 281:main.c        **** {
 173              		.loc 1 281 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
 282:main.c        ****     currentStep = 0;
 183              		.loc 1 282 0
 184 0004 564B     		ldr	r3, .L16
 185 0006 0022     		movs	r2, #0
 186 0008 1A70     		strb	r2, [r3]
 283:main.c        ****     
 284:main.c        ****     currentStep++;    
 187              		.loc 1 284 0
 188 000a 554B     		ldr	r3, .L16
 189 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 190 000e 0133     		adds	r3, r3, #1
 191 0010 DAB2     		uxtb	r2, r3
 192 0012 534B     		ldr	r3, .L16
 193 0014 1A70     		strb	r2, [r3]
 285:main.c        ****     //LED_B_Write(!LED_B_Read());
 286:main.c        ****     if(DeviceAcquire() == FAILURE)     
 194              		.loc 1 286 0
 195 0016 FFF7FEFF 		bl	DeviceAcquire
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 10


 196 001a 0346     		mov	r3, r0
 197 001c 002B     		cmp	r3, #0
 198 001e 01D1     		bne	.L7
 287:main.c        ****         return(FAILURE);
 199              		.loc 1 287 0
 200 0020 0023     		movs	r3, #0
 201 0022 9BE0     		b	.L8
 202              	.L7:
 288:main.c        ****         LCD_Char_Position(0,0);
 203              		.loc 1 288 0
 204 0024 0020     		movs	r0, #0
 205 0026 0021     		movs	r1, #0
 206 0028 FFF7FEFF 		bl	LCD_Char_Position
 289:main.c        ****         LCD_Char_PrintString("Dev Acquire   OK");
 207              		.loc 1 289 0
 208 002c 4D48     		ldr	r0, .L16+4
 209 002e FFF7FEFF 		bl	LCD_Char_PrintString
 290:main.c        ****     
 291:main.c        ****     currentStep++;
 210              		.loc 1 291 0
 211 0032 4B4B     		ldr	r3, .L16
 212 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 0036 0133     		adds	r3, r3, #1
 214 0038 DAB2     		uxtb	r2, r3
 215 003a 494B     		ldr	r3, .L16
 216 003c 1A70     		strb	r2, [r3]
 292:main.c        ****         //LED_B_Write(!LED_B_Read());
 293:main.c        ****     if(VerifySiliconId() == FAILURE)    
 217              		.loc 1 293 0
 218 003e FFF7FEFF 		bl	VerifySiliconId
 219 0042 0346     		mov	r3, r0
 220 0044 002B     		cmp	r3, #0
 221 0046 01D1     		bne	.L9
 294:main.c        ****         return(FAILURE);
 222              		.loc 1 294 0
 223 0048 0023     		movs	r3, #0
 224 004a 87E0     		b	.L8
 225              	.L9:
 295:main.c        ****     LCD_Char_Position(0,0);
 226              		.loc 1 295 0
 227 004c 0020     		movs	r0, #0
 228 004e 0021     		movs	r1, #0
 229 0050 FFF7FEFF 		bl	LCD_Char_Position
 296:main.c        ****     LCD_Char_PrintString("Verify Sil    OK");
 230              		.loc 1 296 0
 231 0054 4448     		ldr	r0, .L16+8
 232 0056 FFF7FEFF 		bl	LCD_Char_PrintString
 297:main.c        **** 
 298:main.c        ****     currentStep++;
 233              		.loc 1 298 0
 234 005a 414B     		ldr	r3, .L16
 235 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 236 005e 0133     		adds	r3, r3, #1
 237 0060 DAB2     		uxtb	r2, r3
 238 0062 3F4B     		ldr	r3, .L16
 239 0064 1A70     		strb	r2, [r3]
 299:main.c        ****         //LED_B_Write(!LED_B_Read());
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 11


 300:main.c        ****     if(EraseAllFlash() == FAILURE)             
 240              		.loc 1 300 0
 241 0066 FFF7FEFF 		bl	EraseAllFlash
 242 006a 0346     		mov	r3, r0
 243 006c 002B     		cmp	r3, #0
 244 006e 01D1     		bne	.L10
 301:main.c        ****         return(FAILURE);
 245              		.loc 1 301 0
 246 0070 0023     		movs	r3, #0
 247 0072 73E0     		b	.L8
 248              	.L10:
 302:main.c        ****     LCD_Char_Position(0,0);
 249              		.loc 1 302 0
 250 0074 0020     		movs	r0, #0
 251 0076 0021     		movs	r1, #0
 252 0078 FFF7FEFF 		bl	LCD_Char_Position
 303:main.c        ****     LCD_Char_PrintString("Erase All     OK");
 253              		.loc 1 303 0
 254 007c 3B48     		ldr	r0, .L16+12
 255 007e FFF7FEFF 		bl	LCD_Char_PrintString
 304:main.c        **** 
 305:main.c        ****     currentStep++;
 256              		.loc 1 305 0
 257 0082 374B     		ldr	r3, .L16
 258 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 259 0086 0133     		adds	r3, r3, #1
 260 0088 DAB2     		uxtb	r2, r3
 261 008a 354B     		ldr	r3, .L16
 262 008c 1A70     		strb	r2, [r3]
 306:main.c        ****        // LED_B_Write(!LED_B_Read());
 307:main.c        ****     if(ChecksumPrivileged() == FAILURE)                    
 263              		.loc 1 307 0
 264 008e FFF7FEFF 		bl	ChecksumPrivileged
 265 0092 0346     		mov	r3, r0
 266 0094 002B     		cmp	r3, #0
 267 0096 01D1     		bne	.L11
 308:main.c        ****         return(FAILURE);
 268              		.loc 1 308 0
 269 0098 0023     		movs	r3, #0
 270 009a 5FE0     		b	.L8
 271              	.L11:
 309:main.c        ****     LCD_Char_Position(0,0);
 272              		.loc 1 309 0
 273 009c 0020     		movs	r0, #0
 274 009e 0021     		movs	r1, #0
 275 00a0 FFF7FEFF 		bl	LCD_Char_Position
 310:main.c        ****     LCD_Char_PrintString("ChkSumPrv     OK");
 276              		.loc 1 310 0
 277 00a4 3248     		ldr	r0, .L16+16
 278 00a6 FFF7FEFF 		bl	LCD_Char_PrintString
 311:main.c        **** 
 312:main.c        ****     currentStep++;
 279              		.loc 1 312 0
 280 00aa 2D4B     		ldr	r3, .L16
 281 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 282 00ae 0133     		adds	r3, r3, #1
 283 00b0 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 12


 284 00b2 2B4B     		ldr	r3, .L16
 285 00b4 1A70     		strb	r2, [r3]
 313:main.c        ****        // LED_B_Write(!LED_B_Read());
 314:main.c        ****     if(ProgramFlash() == FAILURE)          
 286              		.loc 1 314 0
 287 00b6 FFF7FEFF 		bl	ProgramFlash
 288 00ba 0346     		mov	r3, r0
 289 00bc 002B     		cmp	r3, #0
 290 00be 01D1     		bne	.L12
 315:main.c        ****         return(FAILURE);
 291              		.loc 1 315 0
 292 00c0 0023     		movs	r3, #0
 293 00c2 4BE0     		b	.L8
 294              	.L12:
 316:main.c        ****     LCD_Char_Position(0,0);
 295              		.loc 1 316 0
 296 00c4 0020     		movs	r0, #0
 297 00c6 0021     		movs	r1, #0
 298 00c8 FFF7FEFF 		bl	LCD_Char_Position
 317:main.c        ****     LCD_Char_PrintString("Program Flash OK");
 299              		.loc 1 317 0
 300 00cc 2948     		ldr	r0, .L16+20
 301 00ce FFF7FEFF 		bl	LCD_Char_PrintString
 318:main.c        **** 
 319:main.c        ****     currentStep++;
 302              		.loc 1 319 0
 303 00d2 234B     		ldr	r3, .L16
 304 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 305 00d6 0133     		adds	r3, r3, #1
 306 00d8 DAB2     		uxtb	r2, r3
 307 00da 214B     		ldr	r3, .L16
 308 00dc 1A70     		strb	r2, [r3]
 320:main.c        ****        // LED_B_Write(!LED_B_Read());
 321:main.c        ****     if(VerifyFlash() == FAILURE)       
 309              		.loc 1 321 0
 310 00de FFF7FEFF 		bl	VerifyFlash
 311 00e2 0346     		mov	r3, r0
 312 00e4 002B     		cmp	r3, #0
 313 00e6 01D1     		bne	.L13
 322:main.c        ****         return(FAILURE);
 314              		.loc 1 322 0
 315 00e8 0023     		movs	r3, #0
 316 00ea 37E0     		b	.L8
 317              	.L13:
 323:main.c        ****     LCD_Char_Position(0,0);
 318              		.loc 1 323 0
 319 00ec 0020     		movs	r0, #0
 320 00ee 0021     		movs	r1, #0
 321 00f0 FFF7FEFF 		bl	LCD_Char_Position
 324:main.c        ****     LCD_Char_PrintString("Verify Flash  OK");
 322              		.loc 1 324 0
 323 00f4 2048     		ldr	r0, .L16+24
 324 00f6 FFF7FEFF 		bl	LCD_Char_PrintString
 325:main.c        **** 
 326:main.c        ****     currentStep++;
 325              		.loc 1 326 0
 326 00fa 194B     		ldr	r3, .L16
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 13


 327 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 328 00fe 0133     		adds	r3, r3, #1
 329 0100 DAB2     		uxtb	r2, r3
 330 0102 174B     		ldr	r3, .L16
 331 0104 1A70     		strb	r2, [r3]
 327:main.c        ****        // LED_B_Write(!LED_B_Read());
 328:main.c        ****     if(ProgramProtectionSettings() == FAILURE) 
 332              		.loc 1 328 0
 333 0106 FFF7FEFF 		bl	ProgramProtectionSettings
 334 010a 0346     		mov	r3, r0
 335 010c 002B     		cmp	r3, #0
 336 010e 01D1     		bne	.L14
 329:main.c        ****         return(FAILURE);
 337              		.loc 1 329 0
 338 0110 0023     		movs	r3, #0
 339 0112 23E0     		b	.L8
 340              	.L14:
 330:main.c        ****     LCD_Char_Position(0,0);
 341              		.loc 1 330 0
 342 0114 0020     		movs	r0, #0
 343 0116 0021     		movs	r1, #0
 344 0118 FFF7FEFF 		bl	LCD_Char_Position
 331:main.c        ****     LCD_Char_PrintString("Prg Protect   OK");
 345              		.loc 1 331 0
 346 011c 1748     		ldr	r0, .L16+28
 347 011e FFF7FEFF 		bl	LCD_Char_PrintString
 332:main.c        **** 
 333:main.c        ****     currentStep++;
 348              		.loc 1 333 0
 349 0122 0F4B     		ldr	r3, .L16
 350 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 0126 0133     		adds	r3, r3, #1
 352 0128 DAB2     		uxtb	r2, r3
 353 012a 0D4B     		ldr	r3, .L16
 354 012c 1A70     		strb	r2, [r3]
 334:main.c        ****        // LED_B_Write(!LED_B_Read());
 335:main.c        ****     /* Disable for now since this fails    
 336:main.c        ****     if(VerifyProtectionSettings() == FAILURE)
 337:main.c        ****         return(FAILURE);
 338:main.c        ****     LCD_Char_Position(0,0);
 339:main.c        ****     LCD_Char_PrintString("Verify Prot   OK");
 340:main.c        **** */
 341:main.c        ****     currentStep++;
 355              		.loc 1 341 0
 356 012e 0C4B     		ldr	r3, .L16
 357 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 358 0132 0133     		adds	r3, r3, #1
 359 0134 DAB2     		uxtb	r2, r3
 360 0136 0A4B     		ldr	r3, .L16
 361 0138 1A70     		strb	r2, [r3]
 342:main.c        ****        // LED_B_Write(!LED_B_Read());
 343:main.c        ****     if(VerifyChecksum() == FAILURE) 
 362              		.loc 1 343 0
 363 013a FFF7FEFF 		bl	VerifyChecksum
 364 013e 0346     		mov	r3, r0
 365 0140 002B     		cmp	r3, #0
 366 0142 01D1     		bne	.L15
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 14


 344:main.c        ****         return(FAILURE);
 367              		.loc 1 344 0
 368 0144 0023     		movs	r3, #0
 369 0146 09E0     		b	.L8
 370              	.L15:
 345:main.c        ****         LCD_Char_Position(0,0);
 371              		.loc 1 345 0
 372 0148 0020     		movs	r0, #0
 373 014a 0021     		movs	r1, #0
 374 014c FFF7FEFF 		bl	LCD_Char_Position
 346:main.c        ****     LCD_Char_PrintString("Verify ChkSum OK");
 375              		.loc 1 346 0
 376 0150 0B48     		ldr	r0, .L16+32
 377 0152 FFF7FEFF 		bl	LCD_Char_PrintString
 347:main.c        **** 
 348:main.c        ****     ExitProgrammingMode();
 378              		.loc 1 348 0
 379 0156 FFF7FEFF 		bl	ExitProgrammingMode
 349:main.c        ****     
 350:main.c        **** 	/* All the steps were completed successfully */
 351:main.c        ****     return(SUCCESS);
 380              		.loc 1 351 0
 381 015a 0123     		movs	r3, #1
 382              	.L8:
 352:main.c        **** }
 383              		.loc 1 352 0
 384 015c 1846     		mov	r0, r3
 385 015e 80BD     		pop	{r7, pc}
 386              	.L17:
 387              		.align	2
 388              	.L16:
 389 0160 00000000 		.word	currentStep
 390 0164 00000000 		.word	.LC0
 391 0168 14000000 		.word	.LC1
 392 016c 28000000 		.word	.LC2
 393 0170 3C000000 		.word	.LC3
 394 0174 50000000 		.word	.LC4
 395 0178 64000000 		.word	.LC5
 396 017c 78000000 		.word	.LC6
 397 0180 8C000000 		.word	.LC7
 398              		.cfi_endproc
 399              	.LFE64:
 400              		.size	ProgramDevice, .-ProgramDevice
 401              		.text
 402              	.Letext0:
 403              		.file 2 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 404              		.file 3 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 405              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 406              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 407              		.section	.debug_info,"",%progbits
 408              	.Ldebug_info0:
 409 0000 2C010000 		.4byte	0x12c
 410 0004 0400     		.2byte	0x4
 411 0006 00000000 		.4byte	.Ldebug_abbrev0
 412 000a 04       		.byte	0x4
 413 000b 01       		.uleb128 0x1
 414 000c AF000000 		.4byte	.LASF21
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 15


 415 0010 01       		.byte	0x1
 416 0011 2E000000 		.4byte	.LASF22
 417 0015 52010000 		.4byte	.LASF23
 418 0019 00000000 		.4byte	.Ldebug_ranges0+0
 419 001d 00000000 		.4byte	0
 420 0021 00000000 		.4byte	.Ldebug_line0
 421 0025 02       		.uleb128 0x2
 422 0026 01       		.byte	0x1
 423 0027 06       		.byte	0x6
 424 0028 AC010000 		.4byte	.LASF0
 425 002c 02       		.uleb128 0x2
 426 002d 01       		.byte	0x1
 427 002e 08       		.byte	0x8
 428 002f 93000000 		.4byte	.LASF1
 429 0033 02       		.uleb128 0x2
 430 0034 02       		.byte	0x2
 431 0035 05       		.byte	0x5
 432 0036 D4010000 		.4byte	.LASF2
 433 003a 02       		.uleb128 0x2
 434 003b 02       		.byte	0x2
 435 003c 07       		.byte	0x7
 436 003d 0E000000 		.4byte	.LASF3
 437 0041 03       		.uleb128 0x3
 438 0042 B8010000 		.4byte	.LASF9
 439 0046 02       		.byte	0x2
 440 0047 3F       		.byte	0x3f
 441 0048 4C000000 		.4byte	0x4c
 442 004c 02       		.uleb128 0x2
 443 004d 04       		.byte	0x4
 444 004e 05       		.byte	0x5
 445 004f A6000000 		.4byte	.LASF4
 446 0053 02       		.uleb128 0x2
 447 0054 04       		.byte	0x4
 448 0055 07       		.byte	0x7
 449 0056 4E000000 		.4byte	.LASF5
 450 005a 02       		.uleb128 0x2
 451 005b 08       		.byte	0x8
 452 005c 05       		.byte	0x5
 453 005d 44010000 		.4byte	.LASF6
 454 0061 02       		.uleb128 0x2
 455 0062 08       		.byte	0x8
 456 0063 07       		.byte	0x7
 457 0064 70000000 		.4byte	.LASF7
 458 0068 04       		.uleb128 0x4
 459 0069 04       		.byte	0x4
 460 006a 05       		.byte	0x5
 461 006b 696E7400 		.ascii	"int\000"
 462 006f 02       		.uleb128 0x2
 463 0070 04       		.byte	0x4
 464 0071 07       		.byte	0x7
 465 0072 21000000 		.4byte	.LASF8
 466 0076 03       		.uleb128 0x3
 467 0077 DE010000 		.4byte	.LASF10
 468 007b 03       		.byte	0x3
 469 007c 2C       		.byte	0x2c
 470 007d 41000000 		.4byte	0x41
 471 0081 05       		.uleb128 0x5
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 16


 472 0082 48000000 		.4byte	.LASF11
 473 0086 04       		.byte	0x4
 474 0087 9201     		.2byte	0x192
 475 0089 2C000000 		.4byte	0x2c
 476 008d 02       		.uleb128 0x2
 477 008e 04       		.byte	0x4
 478 008f 04       		.byte	0x4
 479 0090 C2010000 		.4byte	.LASF12
 480 0094 02       		.uleb128 0x2
 481 0095 08       		.byte	0x8
 482 0096 04       		.byte	0x4
 483 0097 3D010000 		.4byte	.LASF13
 484 009b 02       		.uleb128 0x2
 485 009c 01       		.byte	0x1
 486 009d 08       		.byte	0x8
 487 009e A1000000 		.4byte	.LASF14
 488 00a2 02       		.uleb128 0x2
 489 00a3 04       		.byte	0x4
 490 00a4 07       		.byte	0x7
 491 00a5 E6010000 		.4byte	.LASF15
 492 00a9 06       		.uleb128 0x6
 493 00aa 35000000 		.4byte	.LASF24
 494 00ae 01       		.byte	0x1
 495 00af 6C       		.byte	0x6c
 496 00b0 68000000 		.4byte	0x68
 497 00b4 00000000 		.4byte	.LFB63
 498 00b8 AE000000 		.4byte	.LFE63-.LFB63
 499 00bc 01       		.uleb128 0x1
 500 00bd 9C       		.byte	0x9c
 501 00be F7000000 		.4byte	0xf7
 502 00c2 07       		.uleb128 0x7
 503 00c3 06000000 		.4byte	.LBB2
 504 00c7 A6000000 		.4byte	.LBE2-.LBB2
 505 00cb 08       		.uleb128 0x8
 506 00cc 3A000000 		.4byte	.LASF16
 507 00d0 01       		.byte	0x1
 508 00d1 71       		.byte	0x71
 509 00d2 2C000000 		.4byte	0x2c
 510 00d6 02       		.uleb128 0x2
 511 00d7 91       		.byte	0x91
 512 00d8 77       		.sleb128 -9
 513 00d9 08       		.uleb128 0x8
 514 00da 87000000 		.4byte	.LASF17
 515 00de 01       		.byte	0x1
 516 00df 74       		.byte	0x74
 517 00e0 2C000000 		.4byte	0x2c
 518 00e4 02       		.uleb128 0x2
 519 00e5 91       		.byte	0x91
 520 00e6 76       		.sleb128 -10
 521 00e7 08       		.uleb128 0x8
 522 00e8 60000000 		.4byte	.LASF18
 523 00ec 01       		.byte	0x1
 524 00ed 78       		.byte	0x78
 525 00ee 2C000000 		.4byte	0x2c
 526 00f2 02       		.uleb128 0x2
 527 00f3 91       		.byte	0x91
 528 00f4 75       		.sleb128 -11
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 17


 529 00f5 00       		.byte	0
 530 00f6 00       		.byte	0
 531 00f7 09       		.uleb128 0x9
 532 00f8 00000000 		.4byte	.LASF25
 533 00fc 01       		.byte	0x1
 534 00fd 1801     		.2byte	0x118
 535 00ff 2C000000 		.4byte	0x2c
 536 0103 00000000 		.4byte	.LFB64
 537 0107 84010000 		.4byte	.LFE64-.LFB64
 538 010b 01       		.uleb128 0x1
 539 010c 9C       		.byte	0x9c
 540 010d 0A       		.uleb128 0xa
 541 010e 9F010000 		.4byte	.LASF19
 542 0112 05       		.byte	0x5
 543 0113 9606     		.2byte	0x696
 544 0115 19010000 		.4byte	0x119
 545 0119 0B       		.uleb128 0xb
 546 011a 76000000 		.4byte	0x76
 547 011e 0C       		.uleb128 0xc
 548 011f C8010000 		.4byte	.LASF20
 549 0123 01       		.byte	0x1
 550 0124 4E       		.byte	0x4e
 551 0125 2C000000 		.4byte	0x2c
 552 0129 05       		.uleb128 0x5
 553 012a 03       		.byte	0x3
 554 012b 00000000 		.4byte	currentStep
 555 012f 00       		.byte	0
 556              		.section	.debug_abbrev,"",%progbits
 557              	.Ldebug_abbrev0:
 558 0000 01       		.uleb128 0x1
 559 0001 11       		.uleb128 0x11
 560 0002 01       		.byte	0x1
 561 0003 25       		.uleb128 0x25
 562 0004 0E       		.uleb128 0xe
 563 0005 13       		.uleb128 0x13
 564 0006 0B       		.uleb128 0xb
 565 0007 03       		.uleb128 0x3
 566 0008 0E       		.uleb128 0xe
 567 0009 1B       		.uleb128 0x1b
 568 000a 0E       		.uleb128 0xe
 569 000b 55       		.uleb128 0x55
 570 000c 17       		.uleb128 0x17
 571 000d 11       		.uleb128 0x11
 572 000e 01       		.uleb128 0x1
 573 000f 10       		.uleb128 0x10
 574 0010 17       		.uleb128 0x17
 575 0011 00       		.byte	0
 576 0012 00       		.byte	0
 577 0013 02       		.uleb128 0x2
 578 0014 24       		.uleb128 0x24
 579 0015 00       		.byte	0
 580 0016 0B       		.uleb128 0xb
 581 0017 0B       		.uleb128 0xb
 582 0018 3E       		.uleb128 0x3e
 583 0019 0B       		.uleb128 0xb
 584 001a 03       		.uleb128 0x3
 585 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 18


 586 001c 00       		.byte	0
 587 001d 00       		.byte	0
 588 001e 03       		.uleb128 0x3
 589 001f 16       		.uleb128 0x16
 590 0020 00       		.byte	0
 591 0021 03       		.uleb128 0x3
 592 0022 0E       		.uleb128 0xe
 593 0023 3A       		.uleb128 0x3a
 594 0024 0B       		.uleb128 0xb
 595 0025 3B       		.uleb128 0x3b
 596 0026 0B       		.uleb128 0xb
 597 0027 49       		.uleb128 0x49
 598 0028 13       		.uleb128 0x13
 599 0029 00       		.byte	0
 600 002a 00       		.byte	0
 601 002b 04       		.uleb128 0x4
 602 002c 24       		.uleb128 0x24
 603 002d 00       		.byte	0
 604 002e 0B       		.uleb128 0xb
 605 002f 0B       		.uleb128 0xb
 606 0030 3E       		.uleb128 0x3e
 607 0031 0B       		.uleb128 0xb
 608 0032 03       		.uleb128 0x3
 609 0033 08       		.uleb128 0x8
 610 0034 00       		.byte	0
 611 0035 00       		.byte	0
 612 0036 05       		.uleb128 0x5
 613 0037 16       		.uleb128 0x16
 614 0038 00       		.byte	0
 615 0039 03       		.uleb128 0x3
 616 003a 0E       		.uleb128 0xe
 617 003b 3A       		.uleb128 0x3a
 618 003c 0B       		.uleb128 0xb
 619 003d 3B       		.uleb128 0x3b
 620 003e 05       		.uleb128 0x5
 621 003f 49       		.uleb128 0x49
 622 0040 13       		.uleb128 0x13
 623 0041 00       		.byte	0
 624 0042 00       		.byte	0
 625 0043 06       		.uleb128 0x6
 626 0044 2E       		.uleb128 0x2e
 627 0045 01       		.byte	0x1
 628 0046 3F       		.uleb128 0x3f
 629 0047 19       		.uleb128 0x19
 630 0048 03       		.uleb128 0x3
 631 0049 0E       		.uleb128 0xe
 632 004a 3A       		.uleb128 0x3a
 633 004b 0B       		.uleb128 0xb
 634 004c 3B       		.uleb128 0x3b
 635 004d 0B       		.uleb128 0xb
 636 004e 49       		.uleb128 0x49
 637 004f 13       		.uleb128 0x13
 638 0050 11       		.uleb128 0x11
 639 0051 01       		.uleb128 0x1
 640 0052 12       		.uleb128 0x12
 641 0053 06       		.uleb128 0x6
 642 0054 40       		.uleb128 0x40
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 19


 643 0055 18       		.uleb128 0x18
 644 0056 9642     		.uleb128 0x2116
 645 0058 19       		.uleb128 0x19
 646 0059 01       		.uleb128 0x1
 647 005a 13       		.uleb128 0x13
 648 005b 00       		.byte	0
 649 005c 00       		.byte	0
 650 005d 07       		.uleb128 0x7
 651 005e 0B       		.uleb128 0xb
 652 005f 01       		.byte	0x1
 653 0060 11       		.uleb128 0x11
 654 0061 01       		.uleb128 0x1
 655 0062 12       		.uleb128 0x12
 656 0063 06       		.uleb128 0x6
 657 0064 00       		.byte	0
 658 0065 00       		.byte	0
 659 0066 08       		.uleb128 0x8
 660 0067 34       		.uleb128 0x34
 661 0068 00       		.byte	0
 662 0069 03       		.uleb128 0x3
 663 006a 0E       		.uleb128 0xe
 664 006b 3A       		.uleb128 0x3a
 665 006c 0B       		.uleb128 0xb
 666 006d 3B       		.uleb128 0x3b
 667 006e 0B       		.uleb128 0xb
 668 006f 49       		.uleb128 0x49
 669 0070 13       		.uleb128 0x13
 670 0071 02       		.uleb128 0x2
 671 0072 18       		.uleb128 0x18
 672 0073 00       		.byte	0
 673 0074 00       		.byte	0
 674 0075 09       		.uleb128 0x9
 675 0076 2E       		.uleb128 0x2e
 676 0077 00       		.byte	0
 677 0078 3F       		.uleb128 0x3f
 678 0079 19       		.uleb128 0x19
 679 007a 03       		.uleb128 0x3
 680 007b 0E       		.uleb128 0xe
 681 007c 3A       		.uleb128 0x3a
 682 007d 0B       		.uleb128 0xb
 683 007e 3B       		.uleb128 0x3b
 684 007f 05       		.uleb128 0x5
 685 0080 27       		.uleb128 0x27
 686 0081 19       		.uleb128 0x19
 687 0082 49       		.uleb128 0x49
 688 0083 13       		.uleb128 0x13
 689 0084 11       		.uleb128 0x11
 690 0085 01       		.uleb128 0x1
 691 0086 12       		.uleb128 0x12
 692 0087 06       		.uleb128 0x6
 693 0088 40       		.uleb128 0x40
 694 0089 18       		.uleb128 0x18
 695 008a 9642     		.uleb128 0x2116
 696 008c 19       		.uleb128 0x19
 697 008d 00       		.byte	0
 698 008e 00       		.byte	0
 699 008f 0A       		.uleb128 0xa
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 20


 700 0090 34       		.uleb128 0x34
 701 0091 00       		.byte	0
 702 0092 03       		.uleb128 0x3
 703 0093 0E       		.uleb128 0xe
 704 0094 3A       		.uleb128 0x3a
 705 0095 0B       		.uleb128 0xb
 706 0096 3B       		.uleb128 0x3b
 707 0097 05       		.uleb128 0x5
 708 0098 49       		.uleb128 0x49
 709 0099 13       		.uleb128 0x13
 710 009a 3F       		.uleb128 0x3f
 711 009b 19       		.uleb128 0x19
 712 009c 3C       		.uleb128 0x3c
 713 009d 19       		.uleb128 0x19
 714 009e 00       		.byte	0
 715 009f 00       		.byte	0
 716 00a0 0B       		.uleb128 0xb
 717 00a1 35       		.uleb128 0x35
 718 00a2 00       		.byte	0
 719 00a3 49       		.uleb128 0x49
 720 00a4 13       		.uleb128 0x13
 721 00a5 00       		.byte	0
 722 00a6 00       		.byte	0
 723 00a7 0C       		.uleb128 0xc
 724 00a8 34       		.uleb128 0x34
 725 00a9 00       		.byte	0
 726 00aa 03       		.uleb128 0x3
 727 00ab 0E       		.uleb128 0xe
 728 00ac 3A       		.uleb128 0x3a
 729 00ad 0B       		.uleb128 0xb
 730 00ae 3B       		.uleb128 0x3b
 731 00af 0B       		.uleb128 0xb
 732 00b0 49       		.uleb128 0x49
 733 00b1 13       		.uleb128 0x13
 734 00b2 3F       		.uleb128 0x3f
 735 00b3 19       		.uleb128 0x19
 736 00b4 02       		.uleb128 0x2
 737 00b5 18       		.uleb128 0x18
 738 00b6 00       		.byte	0
 739 00b7 00       		.byte	0
 740 00b8 00       		.byte	0
 741              		.section	.debug_aranges,"",%progbits
 742 0000 24000000 		.4byte	0x24
 743 0004 0200     		.2byte	0x2
 744 0006 00000000 		.4byte	.Ldebug_info0
 745 000a 04       		.byte	0x4
 746 000b 00       		.byte	0
 747 000c 0000     		.2byte	0
 748 000e 0000     		.2byte	0
 749 0010 00000000 		.4byte	.LFB63
 750 0014 AE000000 		.4byte	.LFE63-.LFB63
 751 0018 00000000 		.4byte	.LFB64
 752 001c 84010000 		.4byte	.LFE64-.LFB64
 753 0020 00000000 		.4byte	0
 754 0024 00000000 		.4byte	0
 755              		.section	.debug_ranges,"",%progbits
 756              	.Ldebug_ranges0:
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 21


 757 0000 00000000 		.4byte	.LFB63
 758 0004 AE000000 		.4byte	.LFE63
 759 0008 00000000 		.4byte	.LFB64
 760 000c 84010000 		.4byte	.LFE64
 761 0010 00000000 		.4byte	0
 762 0014 00000000 		.4byte	0
 763              		.section	.debug_line,"",%progbits
 764              	.Ldebug_line0:
 765 0000 C2010000 		.section	.debug_str,"MS",%progbits,1
 765      02003B01 
 765      00000201 
 765      FB0E0D00 
 765      01010101 
 766              	.LASF25:
 767 0000 50726F67 		.ascii	"ProgramDevice\000"
 767      72616D44 
 767      65766963 
 767      6500
 768              	.LASF3:
 769 000e 73686F72 		.ascii	"short unsigned int\000"
 769      7420756E 
 769      7369676E 
 769      65642069 
 769      6E7400
 770              	.LASF8:
 771 0021 756E7369 		.ascii	"unsigned int\000"
 771      676E6564 
 771      20696E74 
 771      00
 772              	.LASF22:
 773 002e 6D61696E 		.ascii	"main.c\000"
 773      2E6300
 774              	.LASF24:
 775 0035 6D61696E 		.ascii	"main\000"
 775      00
 776              	.LASF16:
 777 003a 70726F67 		.ascii	"programResult\000"
 777      72616D52 
 777      6573756C 
 777      7400
 778              	.LASF11:
 779 0048 75696E74 		.ascii	"uint8\000"
 779      3800
 780              	.LASF5:
 781 004e 6C6F6E67 		.ascii	"long unsigned int\000"
 781      20756E73 
 781      69676E65 
 781      6420696E 
 781      7400
 782              	.LASF18:
 783 0060 73726F6D 		.ascii	"sromErrorStatus\000"
 783      4572726F 
 783      72537461 
 783      74757300 
 784              	.LASF7:
 785 0070 6C6F6E67 		.ascii	"long long unsigned int\000"
 785      206C6F6E 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 22


 785      6720756E 
 785      7369676E 
 785      65642069 
 786              	.LASF17:
 787 0087 6572726F 		.ascii	"errorStatus\000"
 787      72537461 
 787      74757300 
 788              	.LASF1:
 789 0093 756E7369 		.ascii	"unsigned char\000"
 789      676E6564 
 789      20636861 
 789      7200
 790              	.LASF14:
 791 00a1 63686172 		.ascii	"char\000"
 791      00
 792              	.LASF4:
 793 00a6 6C6F6E67 		.ascii	"long int\000"
 793      20696E74 
 793      00
 794              	.LASF21:
 795 00af 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 795      4320342E 
 795      392E3320 
 795      32303135 
 795      30333033 
 796 00e2 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 796      20726576 
 796      6973696F 
 796      6E203232 
 796      31323230 
 797 0115 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 797      66756E63 
 797      74696F6E 
 797      2D736563 
 797      74696F6E 
 798              	.LASF13:
 799 013d 646F7562 		.ascii	"double\000"
 799      6C6500
 800              	.LASF6:
 801 0144 6C6F6E67 		.ascii	"long long int\000"
 801      206C6F6E 
 801      6720696E 
 801      7400
 802              	.LASF23:
 803 0152 443A5C55 		.ascii	"D:\\Users\\WorkBench\\Documents\\GitHub\\BackboneHS"
 803      73657273 
 803      5C576F72 
 803      6B42656E 
 803      63685C44 
 804 0180 53505C50 		.ascii	"SP\\Programmer\\Programmer.cydsn\000"
 804      726F6772 
 804      616D6D65 
 804      725C5072 
 804      6F677261 
 805              	.LASF19:
 806 019f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 806      52784275 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\ccyPId9V.s 			page 23


 806      66666572 
 806      00
 807              	.LASF0:
 808 01ac 7369676E 		.ascii	"signed char\000"
 808      65642063 
 808      68617200 
 809              	.LASF9:
 810 01b8 5F5F696E 		.ascii	"__int32_t\000"
 810      7433325F 
 810      7400
 811              	.LASF12:
 812 01c2 666C6F61 		.ascii	"float\000"
 812      7400
 813              	.LASF20:
 814 01c8 63757272 		.ascii	"currentStep\000"
 814      656E7453 
 814      74657000 
 815              	.LASF2:
 816 01d4 73686F72 		.ascii	"short int\000"
 816      7420696E 
 816      7400
 817              	.LASF10:
 818 01de 696E7433 		.ascii	"int32_t\000"
 818      325F7400 
 819              	.LASF15:
 820 01e6 73697A65 		.ascii	"sizetype\000"
 820      74797065 
 820      00
 821              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
