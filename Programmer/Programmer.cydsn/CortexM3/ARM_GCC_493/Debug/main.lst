ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	currentStep,1,1
  19              		.section	.text.main,"ax",%progbits
  20              		.align	2
  21              		.global	main
  22              		.thumb
  23              		.thumb_func
  24              		.type	main, %function
  25              	main:
  26              	.LFB63:
  27              		.file 1 "main.c"
   1:main.c        **** /******************************************************************************
   2:main.c        **** 
   3:main.c        **** 
   4:main.c        **** *******************************************************************************
   5:main.c        **** *  Project Name: A_Hssp_Programmer
   6:main.c        **** *  Project Revision: 1.00
   7:main.c        **** *  Software Version: PSoC Creator 3.3
   8:main.c        **** *  Device Tested: CY8C5868AXI-LP035
   9:main.c        **** *  Compilers Tested: ARM GCC 4.9-2015-q1-update
  10:main.c        **** *  Related Hardware: CY8CKIT-050
  11:main.c        **** ******************************************************************************/
  12:main.c        **** 
  13:main.c        **** /******************************************************************************
  14:main.c        **** * Project Description:
  15:main.c        **** * This is a sample HSSP implmentation demonstrating a PSoC 5LP programming
  16:main.c        **** * PSoC 4. The project is tested using CY8CKIT-050 with PSoC 5LP chip and 
  17:main.c        **** * CY8CKIT-001 with PSoC 4 processor module.
  18:main.c        **** *
  19:main.c        **** * Connections Required
  20:main.c        **** * CY8CKIT-050 (PSoC 5LP DVK) :
  21:main.c        **** *  Pin_SWDIO (P0[0])- This pin is connected to SWDIO (Debug pin) of PSoC 4 kit.
  22:main.c        **** *  Pin_SWDCK (P0[1])- This pin is connected to SWDCK (Debug pin) of PSoC 4 kit.
  23:main.c        **** *  Pin_XRES  (P0[2])- This pin is connected to XRES input of PSoC kit.
  24:main.c        **** *  Pin_Start (P6[1])- This pin is internally connected to switch SW2.
  25:main.c        **** *
  26:main.c        **** * Note that the GNDs of both DVKs should be connected together and Power should
  27:main.c        **** * be supplied from a single source.
  28:main.c        **** *
  29:main.c        **** * The hex file included in this project toggles pin P1[6] of PSoC 4 at 1Hz
  30:main.c        **** * frequency and displays “PSoC Programmed” on the character LCD mounted on
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 2


  31:main.c        **** * CY8CKIT-001 DVK.
  32:main.c        **** * 
  33:main.c        **** * Connections required on the CY8CKIT-001 with PSoC 4 Processor Module :
  34:main.c        **** * 	1. Connect P1[6] to LED1
  35:main.c        **** *	2. Mount character LCD on the kit
  36:main.c        **** *
  37:main.c        **** * Press SW2 on the PSoC 5LP DVK to start the programming operation.
  38:main.c        **** * ProgramDevice() function in main.c calls all the programming steps
  39:main.c        **** * sequentially to program PSoC 4.
  40:main.c        **** *
  41:main.c        **** * main.c checks the result of ProgramDevice() function and if it returns 
  42:main.c        **** * SUCCESS, "HSSP Success" is displayed on the character LCD mounted on the
  43:main.c        **** * PSoC 5LP kit. If ProgramDevice() returns failure, Step of failure, Reason
  44:main.c        **** * of failure is displayed on the LCD. If the error is because of SROM, It
  45:main.c        **** * displays the SROM error code.
  46:main.c        **** *
  47:main.c        **** * On the PSoC 4 Side, LED connected to P1[6] starts to toggle at 1 Hz
  48:main.c        **** * frequency and character LCD displays the message after successful 
  49:main.c        **** * programming.
  50:main.c        **** *
  51:main.c        **** * Note:
  52:main.c        **** *  The Character LCD functions and the Pin_Start APIs in the main() function
  53:main.c        **** *  are for PSoC 5LP host programmer. If you are using any other microcontroller,
  54:main.c        **** *  replace the functions with the APIs supported by the host or change the macro
  55:main.c        **** *  USE_LCD and USE_START_PIN to 0 to remove all LCD and Pin_Start functions.
  56:main.c        **** ******************************************************************************/
  57:main.c        **** 
  58:main.c        **** /* This file is included for calling Character LCD and Pin_Start APIs in
  59:main.c        ****    PSoC 5LP. Remove this header file while porting to non PSoC 5LP host
  60:main.c        ****    programmer */
  61:main.c        **** #include <device.h>
  62:main.c        **** 
  63:main.c        **** #include <project.h>
  64:main.c        **** 
  65:main.c        **** /* These macros are used to remove all LCD and Pin_Start functions while
  66:main.c        ****    porting this code to non PSoC 5LP host programmer */
  67:main.c        **** #define USE_LCD 		0
  68:main.c        **** #define USE_START_PIN 	1
  69:main.c        **** 
  70:main.c        **** /* This file has the top level HSSP routines that should be called from main
  71:main.c        ****    application code */
  72:main.c        **** #include "ProgrammingSteps.h"
  73:main.c        **** 
  74:main.c        **** /* Function which sequentially calls all the programming steps */
  75:main.c        **** unsigned char ProgramDevice(void);
  76:main.c        **** 
  77:main.c        **** /* Global variable which stores the current programming step under execution */
  78:main.c        **** unsigned char currentStep;
  79:main.c        **** 
  80:main.c        **** /* Slave address of the EZI2C */
  81:main.c        **** //#define EZI2C_SLAVE_ADDR        (0x08u)
  82:main.c        **** //#define BUFFER_SIZE             (0x04u)
  83:main.c        **** //#define BUFFER_RW_AREA_SIZE     (0x02u)
  84:main.c        **** 
  85:main.c        **** /* Denotes the offset inside the EZI2C buffer */
  86:main.c        **** //#define SLAVE_ADDR_SIZE         (0x01u)
  87:main.c        **** 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 3


  88:main.c        **** //#define ACTION_SELECT_NONE      (0x00u)     /* Do nothing       */
  89:main.c        **** //#define ACTION_SELECT_WRITE     (0x01u)     /* Write to EZI2C   */
  90:main.c        **** //#define ACTION_SELECT_READ      (0x02u)     /* Read from EZI2C  */
  91:main.c        **** 
  92:main.c        **** /* Desing interrupt handlers for SW1 and SW2 event */
  93:main.c        **** CY_ISR_PROTO(ISR_WriteSW1_Interrupt);
  94:main.c        **** CY_ISR_PROTO(ISR_ReadSW2_Interrupt);
  95:main.c        **** 
  96:main.c        **** /* EZI2C buffer */
  97:main.c        **** //uint8   ezi2cBuffer[BUFFER_SIZE];
  98:main.c        **** 
  99:main.c        **** /* I2C buffer with the data read from EZI2C */
 100:main.c        **** //uint8   i2cBufferRead[BUFFER_SIZE];
 101:main.c        **** 
 102:main.c        **** /* I2C buffer with the data to be written to EZI2C */
 103:main.c        **** //uint8   i2cBufferWrite[SLAVE_ADDR_SIZE + BUFFER_SIZE];
 104:main.c        **** 
 105:main.c        **** /* Initialize action variable */
 106:main.c        **** //volatile uint8 actionSelect = ACTION_SELECT_NONE;
 107:main.c        **** 
 108:main.c        **** int main()
 109:main.c        **** {
  28              		.loc 1 109 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40              	.L5:
  41              	.LBB2:
 110:main.c        ****     for( ; ; )
 111:main.c        ****     {
 112:main.c        ****     /* Variable to store the result of HSSP operation */
 113:main.c        ****     unsigned char programResult;   
 114:main.c        **** 	
 115:main.c        **** 	/* Variable to store the HSSP Error status in case of failure */
 116:main.c        ****     unsigned char errorStatus; 
 117:main.c        **** 	
 118:main.c        **** 	/* Variable to store the SROM Error status if errorStatus contains
 119:main.c        **** 	   SROM_TIMEOUT_ERROR error */
 120:main.c        ****     unsigned char sromErrorStatus;
 121:main.c        ****         
 122:main.c        ****     Pin_EN_Write(1); //Disable Power Switch
  42              		.loc 1 122 0
  43 0006 0120     		movs	r0, #1
  44 0008 FFF7FEFF 		bl	Pin_EN_Write
 123:main.c        **** 	
 124:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 125:main.c        **** 	if(USE_LCD)
 126:main.c        **** 	{
 127:main.c        **** 		/* Initialize Character LCD  */
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 4


 128:main.c        **** 	    LCD_Char_Start();
 129:main.c        **** 		
 130:main.c        **** 		/* Display the message */
 131:main.c        **** 		LCD_Char_Position(0,0);
 132:main.c        **** 		LCD_Char_PrintString("Press SWITCH SW2");
 133:main.c        **** 	}
 134:main.c        ****     
 135:main.c        **** 	/* Set USE_START_PIN macro to 0 if PSoC 5LP is not used as host
 136:main.c        **** 	   microcontroller */
 137:main.c        **** 	if(USE_START_PIN)
 138:main.c        **** 	{
 139:main.c        **** 		while (Pin_Start_Read() == 1);
  45              		.loc 1 139 0
  46 000c 00BF     		nop
  47              	.L2:
  48              		.loc 1 139 0 is_stmt 0 discriminator 1
  49 000e FFF7FEFF 		bl	Pin_Start_Read
  50 0012 0346     		mov	r3, r0
  51 0014 012B     		cmp	r3, #1
  52 0016 FAD0     		beq	.L2
 140:main.c        **** 	}
 141:main.c        **** 	
 142:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 143:main.c        **** 	if(USE_LCD)
 144:main.c        **** 	{
 145:main.c        **** 		/* Clear Character LCD  */
 146:main.c        **** 		LCD_Char_ClearDisplay();
 147:main.c        **** 		
 148:main.c        **** 		/* Display the message */
 149:main.c        **** 	    LCD_Char_Position(0,0);
 150:main.c        **** 	    LCD_Char_PrintString("Programming PSoC4");
 151:main.c        **** 	}
 152:main.c        ****     
 153:main.c        ****     LED_R_Write(0);
  53              		.loc 1 153 0 is_stmt 1
  54 0018 0020     		movs	r0, #0
  55 001a FFF7FEFF 		bl	LED_R_Write
 154:main.c        ****     LED_G_Write(0);
  56              		.loc 1 154 0
  57 001e 0020     		movs	r0, #0
  58 0020 FFF7FEFF 		bl	LED_G_Write
 155:main.c        ****     LED_B_Write(0);
  59              		.loc 1 155 0
  60 0024 0020     		movs	r0, #0
  61 0026 FFF7FEFF 		bl	LED_B_Write
 156:main.c        ****     //LED_R_GND_Write(0);
 157:main.c        ****     /* Write a byte to a Control Register */
 158:main.c        ****     Control_Reg_Write(0x00u); //Enables PWM
  62              		.loc 1 158 0
  63 002a 0020     		movs	r0, #0
  64 002c FFF7FEFF 		bl	Control_Reg_Write
 159:main.c        ****     PWM_Start();
  65              		.loc 1 159 0
  66 0030 FFF7FEFF 		bl	PWM_Start
 160:main.c        ****     // Set SWDCK low initially because high bleeds though & powers board
 161:main.c        ****     Pin_SWDCK_Write(0);
  67              		.loc 1 161 0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 5


  68 0034 0020     		movs	r0, #0
  69 0036 FFF7FEFF 		bl	Pin_SWDCK_Write
 162:main.c        ****     Pin_SWDIO_Write(0);
  70              		.loc 1 162 0
  71 003a 0020     		movs	r0, #0
  72 003c FFF7FEFF 		bl	Pin_SWDIO_Write
 163:main.c        ****        
 164:main.c        ****     /* Start EZI2C */
 165:main.c        ****    // EZI2C_Start();
 166:main.c        ****     
 167:main.c        ****     /* Enable global interrupts */
 168:main.c        ****     CyGlobalIntEnable;
  73              		.loc 1 168 0
  74              	@ 168 "main.c" 1
  75 0040 62B6     		CPSIE   i
  76              	@ 0 "" 2
 169:main.c        ****     
 170:main.c        ****     /* Initialize EZI2C buffer's read only data */
 171:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE     ] = 0xAAu;
 172:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE + 1u] = 0xBBu;
 173:main.c        **** 
 174:main.c        ****     /***************************************************************************
 175:main.c        ****     * The first parameter sets the size of the exposed memory to the I2C
 176:main.c        ****     * interface. In this case, it is the entire array. The second parameter sets
 177:main.c        ****     * the boundary between the read/write and read only areas by setting the
 178:main.c        ****     * number of bytes in the read/write area. The read/write area is first,
 179:main.c        ****     * followed by the read only area. In this case, only the first
 180:main.c        ****     * BUFFER_RW_AREA_SIZE bytes may be written, but all bytes may be read by the
 181:main.c        ****     * I2C master. The third parameter is a pointer to the data.
 182:main.c        ****     ***************************************************************************/
 183:main.c        ****     //EZI2C_SetBuffer1(BUFFER_SIZE, BUFFER_RW_AREA_SIZE, (void *) ezi2cBuffer);
 184:main.c        **** 
 185:main.c        **** 
 186:main.c        ****     /* Start the HSSP Programming and store the status */
 187:main.c        ****     Pin_EN_Write(0); //Enable switch to power DUT, active low
  77              		.loc 1 187 0
  78              		.thumb
  79 0042 0020     		movs	r0, #0
  80 0044 FFF7FEFF 		bl	Pin_EN_Write
 188:main.c        ****     programResult = ProgramDevice();
  81              		.loc 1 188 0
  82 0048 FFF7FEFF 		bl	ProgramDevice
  83 004c 0346     		mov	r3, r0
  84 004e FB71     		strb	r3, [r7, #7]
 189:main.c        ****     
 190:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 191:main.c        **** 	if(USE_LCD)
 192:main.c        **** 	{
 193:main.c        **** 	    /* Character LCD will display the status of HSSP Programming  */
 194:main.c        **** 	    LCD_Char_ClearDisplay();
 195:main.c        **** 	}
 196:main.c        ****     /* Write a byte to a Control Register */
 197:main.c        ****     Control_Reg_Write(0x01u); //Kills PWM
  85              		.loc 1 197 0
  86 0050 0120     		movs	r0, #1
  87 0052 FFF7FEFF 		bl	Control_Reg_Write
 198:main.c        ****     PWM_Stop();
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 6


  88              		.loc 1 198 0
  89 0056 FFF7FEFF 		bl	PWM_Stop
 199:main.c        ****     LED_B_Write(0); //Turn Blue LED OFF
  90              		.loc 1 199 0
  91 005a 0020     		movs	r0, #0
  92 005c FFF7FEFF 		bl	LED_B_Write
 200:main.c        ****     
 201:main.c        **** 	/* HSSP completed successfully */
 202:main.c        ****     if(programResult == SUCCESS) 
  93              		.loc 1 202 0
  94 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  95 0062 012B     		cmp	r3, #1
  96 0064 03D1     		bne	.L3
 203:main.c        ****     {
 204:main.c        **** 
 205:main.c        ****         LED_G_Write(1);
  97              		.loc 1 205 0
  98 0066 0120     		movs	r0, #1
  99 0068 FFF7FEFF 		bl	LED_G_Write
 100 006c 0FE0     		b	.L4
 101              	.L3:
 206:main.c        ****         
 207:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 208:main.c        ****         if(USE_LCD)
 209:main.c        **** 		{
 210:main.c        **** 			LCD_Char_Position(0,0);
 211:main.c        ****         	LCD_Char_PrintString("HSSP Success");
 212:main.c        ****     	}
 213:main.c        **** 	}
 214:main.c        **** 	
 215:main.c        **** 	/* HSSP Failure */
 216:main.c        ****     else
 217:main.c        ****     {
 218:main.c        ****         LED_R_Write(1);
 102              		.loc 1 218 0
 103 006e 0120     		movs	r0, #1
 104 0070 FFF7FEFF 		bl	LED_R_Write
 219:main.c        ****         //LED_R_GND_Write(0);
 220:main.c        **** 
 221:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 222:main.c        ****         if(USE_LCD)
 223:main.c        **** 		{
 224:main.c        **** 			/* Display the step number where the HSSP failed */
 225:main.c        **** 	        LCD_Char_Position(0,0);
 226:main.c        **** 	        LCD_Char_PrintString("HSSP Fail Step");
 227:main.c        **** 	        LCD_Char_PrintInt8(currentStep);
 228:main.c        **** 		}
 229:main.c        ****         		
 230:main.c        ****         /* Get the HSSP error status and display on THE LCD */
 231:main.c        ****         errorStatus = ReadHsspErrorStatus();
 105              		.loc 1 231 0
 106 0074 FFF7FEFF 		bl	ReadHsspErrorStatus
 107 0078 0346     		mov	r3, r0
 108 007a BB71     		strb	r3, [r7, #6]
 232:main.c        ****         
 233:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 234:main.c        **** 		if(USE_LCD)
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 7


 235:main.c        **** 		{
 236:main.c        **** 	        LCD_Char_Position(1,0);
 237:main.c        **** 	        LCD_Char_PrintString("Err ");
 238:main.c        **** 	        LCD_Char_PrintInt8(errorStatus);
 239:main.c        **** 		}
 240:main.c        ****         
 241:main.c        ****         /* If the errorStatus contains THE SROM_TIMEOUT_ERROR error condition,
 242:main.c        ****            read the Status Code returned by CPUSS_SYSARG register and display
 243:main.c        **** 		   on THE LCD */
 244:main.c        ****         if(errorStatus & SROM_TIMEOUT_ERROR)
 109              		.loc 1 244 0
 110 007c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 111 007e 03F02003 		and	r3, r3, #32
 112 0082 002B     		cmp	r3, #0
 113 0084 03D0     		beq	.L4
 245:main.c        ****         {
 246:main.c        ****             sromErrorStatus = ReadSromStatus();
 114              		.loc 1 246 0
 115 0086 FFF7FEFF 		bl	ReadSromStatus
 116 008a 0346     		mov	r3, r0
 117 008c 7B71     		strb	r3, [r7, #5]
 118              	.L4:
 247:main.c        ****             
 248:main.c        **** 			/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 249:main.c        **** 			if(USE_LCD)
 250:main.c        **** 			{
 251:main.c        **** 				LCD_Char_PrintString(" SROM ");
 252:main.c        **** 				LCD_Char_PrintInt8(sromErrorStatus);
 253:main.c        **** 			}
 254:main.c        ****         }
 255:main.c        ****     }
 256:main.c        ****     Pin_SWDCK_Write(0); //Leaving high causes bleed through & powers device
 119              		.loc 1 256 0
 120 008e 0020     		movs	r0, #0
 121 0090 FFF7FEFF 		bl	Pin_SWDCK_Write
 257:main.c        ****     Pin_EN_Write(1); //Done programming power DUT OFF
 122              		.loc 1 257 0
 123 0094 0120     		movs	r0, #1
 124 0096 FFF7FEFF 		bl	Pin_EN_Write
 258:main.c        ****     Pin_XRES_SetDriveMode(Pin_XRES_DM_ALG_HIZ);
 125              		.loc 1 258 0
 126 009a 0020     		movs	r0, #0
 127 009c FFF7FEFF 		bl	Pin_XRES_SetDriveMode
 128              	.LBE2:
 259:main.c        **** 
 260:main.c        **** 
 261:main.c        ****         /* Do Nothing */
 262:main.c        ****     }
 129              		.loc 1 262 0
 130 00a0 B1E7     		b	.L5
 131              		.cfi_endproc
 132              	.LFE63:
 133              		.size	main, .-main
 134 00a2 00BF     		.section	.rodata
 135              		.align	2
 136              	.LC0:
 137 0000 44657620 		.ascii	"Dev Acquire   OK\000"
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 8


 137      41637175 
 137      69726520 
 137      20204F4B 
 137      00
 138 0011 000000   		.align	2
 139              	.LC1:
 140 0014 56657269 		.ascii	"Verify Sil    OK\000"
 140      66792053 
 140      696C2020 
 140      20204F4B 
 140      00
 141 0025 000000   		.align	2
 142              	.LC2:
 143 0028 45726173 		.ascii	"Erase All     OK\000"
 143      6520416C 
 143      6C202020 
 143      20204F4B 
 143      00
 144 0039 000000   		.align	2
 145              	.LC3:
 146 003c 43686B53 		.ascii	"ChkSumPrv     OK\000"
 146      756D5072 
 146      76202020 
 146      20204F4B 
 146      00
 147 004d 000000   		.align	2
 148              	.LC4:
 149 0050 50726F67 		.ascii	"Program Flash OK\000"
 149      72616D20 
 149      466C6173 
 149      68204F4B 
 149      00
 150 0061 000000   		.align	2
 151              	.LC5:
 152 0064 56657269 		.ascii	"Verify Flash  OK\000"
 152      66792046 
 152      6C617368 
 152      20204F4B 
 152      00
 153 0075 000000   		.align	2
 154              	.LC6:
 155 0078 50726720 		.ascii	"Prg Protect   OK\000"
 155      50726F74 
 155      65637420 
 155      20204F4B 
 155      00
 156 0089 000000   		.align	2
 157              	.LC7:
 158 008c 56657269 		.ascii	"Verify ChkSum OK\000"
 158      66792043 
 158      686B5375 
 158      6D204F4B 
 158      00
 159 009d 000000   		.section	.text.ProgramDevice,"ax",%progbits
 160              		.align	2
 161              		.global	ProgramDevice
 162              		.thumb
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 9


 163              		.thumb_func
 164              		.type	ProgramDevice, %function
 165              	ProgramDevice:
 166              	.LFB64:
 263:main.c        **** }
 264:main.c        **** 
 265:main.c        **** /******************************************************************************
 266:main.c        **** * Function Name: unsigned char ProgramDevice(void)
 267:main.c        **** *******************************************************************************
 268:main.c        **** * Summary:
 269:main.c        **** *  This function sequentially calls all the functions required to program a
 270:main.c        **** *  PSoC 4. These functions are defined in ProgrammingSteps.h.
 271:main.c        **** *
 272:main.c        **** * Parameters:
 273:main.c        **** *  None.
 274:main.c        **** *
 275:main.c        **** * Return:
 276:main.c        **** *  SUCCESS - All the programming steps executed successfully
 277:main.c        **** *  FAILURE - HSSP programming fails in any one of the programming step
 278:main.c        **** *
 279:main.c        **** ******************************************************************************/
 280:main.c        **** unsigned char ProgramDevice()
 281:main.c        **** {
 167              		.loc 1 281 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171 0000 80B5     		push	{r7, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 7, -8
 174              		.cfi_offset 14, -4
 175 0002 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 282:main.c        ****     currentStep = 0;
 177              		.loc 1 282 0
 178 0004 564B     		ldr	r3, .L16
 179 0006 0022     		movs	r2, #0
 180 0008 1A70     		strb	r2, [r3]
 283:main.c        ****     
 284:main.c        ****     currentStep++;    
 181              		.loc 1 284 0
 182 000a 554B     		ldr	r3, .L16
 183 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 184 000e 0133     		adds	r3, r3, #1
 185 0010 DAB2     		uxtb	r2, r3
 186 0012 534B     		ldr	r3, .L16
 187 0014 1A70     		strb	r2, [r3]
 285:main.c        ****     //LED_B_Write(!LED_B_Read());
 286:main.c        ****     if(DeviceAcquire() == FAILURE)     
 188              		.loc 1 286 0
 189 0016 FFF7FEFF 		bl	DeviceAcquire
 190 001a 0346     		mov	r3, r0
 191 001c 002B     		cmp	r3, #0
 192 001e 01D1     		bne	.L7
 287:main.c        ****         return(FAILURE);
 193              		.loc 1 287 0
 194 0020 0023     		movs	r3, #0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 10


 195 0022 9BE0     		b	.L8
 196              	.L7:
 288:main.c        ****         LCD_Char_Position(0,0);
 197              		.loc 1 288 0
 198 0024 0020     		movs	r0, #0
 199 0026 0021     		movs	r1, #0
 200 0028 FFF7FEFF 		bl	LCD_Char_Position
 289:main.c        ****         LCD_Char_PrintString("Dev Acquire   OK");
 201              		.loc 1 289 0
 202 002c 4D48     		ldr	r0, .L16+4
 203 002e FFF7FEFF 		bl	LCD_Char_PrintString
 290:main.c        ****     
 291:main.c        ****     currentStep++;
 204              		.loc 1 291 0
 205 0032 4B4B     		ldr	r3, .L16
 206 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 207 0036 0133     		adds	r3, r3, #1
 208 0038 DAB2     		uxtb	r2, r3
 209 003a 494B     		ldr	r3, .L16
 210 003c 1A70     		strb	r2, [r3]
 292:main.c        ****         //LED_B_Write(!LED_B_Read());
 293:main.c        ****     if(VerifySiliconId() == FAILURE)    
 211              		.loc 1 293 0
 212 003e FFF7FEFF 		bl	VerifySiliconId
 213 0042 0346     		mov	r3, r0
 214 0044 002B     		cmp	r3, #0
 215 0046 01D1     		bne	.L9
 294:main.c        ****         return(FAILURE);
 216              		.loc 1 294 0
 217 0048 0023     		movs	r3, #0
 218 004a 87E0     		b	.L8
 219              	.L9:
 295:main.c        ****     LCD_Char_Position(0,0);
 220              		.loc 1 295 0
 221 004c 0020     		movs	r0, #0
 222 004e 0021     		movs	r1, #0
 223 0050 FFF7FEFF 		bl	LCD_Char_Position
 296:main.c        ****     LCD_Char_PrintString("Verify Sil    OK");
 224              		.loc 1 296 0
 225 0054 4448     		ldr	r0, .L16+8
 226 0056 FFF7FEFF 		bl	LCD_Char_PrintString
 297:main.c        **** 
 298:main.c        ****     currentStep++;
 227              		.loc 1 298 0
 228 005a 414B     		ldr	r3, .L16
 229 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 230 005e 0133     		adds	r3, r3, #1
 231 0060 DAB2     		uxtb	r2, r3
 232 0062 3F4B     		ldr	r3, .L16
 233 0064 1A70     		strb	r2, [r3]
 299:main.c        ****         //LED_B_Write(!LED_B_Read());
 300:main.c        ****     if(EraseAllFlash() == FAILURE)             
 234              		.loc 1 300 0
 235 0066 FFF7FEFF 		bl	EraseAllFlash
 236 006a 0346     		mov	r3, r0
 237 006c 002B     		cmp	r3, #0
 238 006e 01D1     		bne	.L10
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 11


 301:main.c        ****         return(FAILURE);
 239              		.loc 1 301 0
 240 0070 0023     		movs	r3, #0
 241 0072 73E0     		b	.L8
 242              	.L10:
 302:main.c        ****     LCD_Char_Position(0,0);
 243              		.loc 1 302 0
 244 0074 0020     		movs	r0, #0
 245 0076 0021     		movs	r1, #0
 246 0078 FFF7FEFF 		bl	LCD_Char_Position
 303:main.c        ****     LCD_Char_PrintString("Erase All     OK");
 247              		.loc 1 303 0
 248 007c 3B48     		ldr	r0, .L16+12
 249 007e FFF7FEFF 		bl	LCD_Char_PrintString
 304:main.c        **** 
 305:main.c        ****     currentStep++;
 250              		.loc 1 305 0
 251 0082 374B     		ldr	r3, .L16
 252 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 253 0086 0133     		adds	r3, r3, #1
 254 0088 DAB2     		uxtb	r2, r3
 255 008a 354B     		ldr	r3, .L16
 256 008c 1A70     		strb	r2, [r3]
 306:main.c        ****        // LED_B_Write(!LED_B_Read());
 307:main.c        ****     if(ChecksumPrivileged() == FAILURE)                    
 257              		.loc 1 307 0
 258 008e FFF7FEFF 		bl	ChecksumPrivileged
 259 0092 0346     		mov	r3, r0
 260 0094 002B     		cmp	r3, #0
 261 0096 01D1     		bne	.L11
 308:main.c        ****         return(FAILURE);
 262              		.loc 1 308 0
 263 0098 0023     		movs	r3, #0
 264 009a 5FE0     		b	.L8
 265              	.L11:
 309:main.c        ****     LCD_Char_Position(0,0);
 266              		.loc 1 309 0
 267 009c 0020     		movs	r0, #0
 268 009e 0021     		movs	r1, #0
 269 00a0 FFF7FEFF 		bl	LCD_Char_Position
 310:main.c        ****     LCD_Char_PrintString("ChkSumPrv     OK");
 270              		.loc 1 310 0
 271 00a4 3248     		ldr	r0, .L16+16
 272 00a6 FFF7FEFF 		bl	LCD_Char_PrintString
 311:main.c        **** 
 312:main.c        ****     currentStep++;
 273              		.loc 1 312 0
 274 00aa 2D4B     		ldr	r3, .L16
 275 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 276 00ae 0133     		adds	r3, r3, #1
 277 00b0 DAB2     		uxtb	r2, r3
 278 00b2 2B4B     		ldr	r3, .L16
 279 00b4 1A70     		strb	r2, [r3]
 313:main.c        ****        // LED_B_Write(!LED_B_Read());
 314:main.c        ****     if(ProgramFlash() == FAILURE)          
 280              		.loc 1 314 0
 281 00b6 FFF7FEFF 		bl	ProgramFlash
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 12


 282 00ba 0346     		mov	r3, r0
 283 00bc 002B     		cmp	r3, #0
 284 00be 01D1     		bne	.L12
 315:main.c        ****         return(FAILURE);
 285              		.loc 1 315 0
 286 00c0 0023     		movs	r3, #0
 287 00c2 4BE0     		b	.L8
 288              	.L12:
 316:main.c        ****     LCD_Char_Position(0,0);
 289              		.loc 1 316 0
 290 00c4 0020     		movs	r0, #0
 291 00c6 0021     		movs	r1, #0
 292 00c8 FFF7FEFF 		bl	LCD_Char_Position
 317:main.c        ****     LCD_Char_PrintString("Program Flash OK");
 293              		.loc 1 317 0
 294 00cc 2948     		ldr	r0, .L16+20
 295 00ce FFF7FEFF 		bl	LCD_Char_PrintString
 318:main.c        **** 
 319:main.c        ****     currentStep++;
 296              		.loc 1 319 0
 297 00d2 234B     		ldr	r3, .L16
 298 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299 00d6 0133     		adds	r3, r3, #1
 300 00d8 DAB2     		uxtb	r2, r3
 301 00da 214B     		ldr	r3, .L16
 302 00dc 1A70     		strb	r2, [r3]
 320:main.c        ****        // LED_B_Write(!LED_B_Read());
 321:main.c        ****     if(VerifyFlash() == FAILURE)       
 303              		.loc 1 321 0
 304 00de FFF7FEFF 		bl	VerifyFlash
 305 00e2 0346     		mov	r3, r0
 306 00e4 002B     		cmp	r3, #0
 307 00e6 01D1     		bne	.L13
 322:main.c        ****         return(FAILURE);
 308              		.loc 1 322 0
 309 00e8 0023     		movs	r3, #0
 310 00ea 37E0     		b	.L8
 311              	.L13:
 323:main.c        ****     LCD_Char_Position(0,0);
 312              		.loc 1 323 0
 313 00ec 0020     		movs	r0, #0
 314 00ee 0021     		movs	r1, #0
 315 00f0 FFF7FEFF 		bl	LCD_Char_Position
 324:main.c        ****     LCD_Char_PrintString("Verify Flash  OK");
 316              		.loc 1 324 0
 317 00f4 2048     		ldr	r0, .L16+24
 318 00f6 FFF7FEFF 		bl	LCD_Char_PrintString
 325:main.c        **** 
 326:main.c        ****     currentStep++;
 319              		.loc 1 326 0
 320 00fa 194B     		ldr	r3, .L16
 321 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 322 00fe 0133     		adds	r3, r3, #1
 323 0100 DAB2     		uxtb	r2, r3
 324 0102 174B     		ldr	r3, .L16
 325 0104 1A70     		strb	r2, [r3]
 327:main.c        ****        // LED_B_Write(!LED_B_Read());
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 13


 328:main.c        ****     if(ProgramProtectionSettings() == FAILURE) 
 326              		.loc 1 328 0
 327 0106 FFF7FEFF 		bl	ProgramProtectionSettings
 328 010a 0346     		mov	r3, r0
 329 010c 002B     		cmp	r3, #0
 330 010e 01D1     		bne	.L14
 329:main.c        ****         return(FAILURE);
 331              		.loc 1 329 0
 332 0110 0023     		movs	r3, #0
 333 0112 23E0     		b	.L8
 334              	.L14:
 330:main.c        ****     LCD_Char_Position(0,0);
 335              		.loc 1 330 0
 336 0114 0020     		movs	r0, #0
 337 0116 0021     		movs	r1, #0
 338 0118 FFF7FEFF 		bl	LCD_Char_Position
 331:main.c        ****     LCD_Char_PrintString("Prg Protect   OK");
 339              		.loc 1 331 0
 340 011c 1748     		ldr	r0, .L16+28
 341 011e FFF7FEFF 		bl	LCD_Char_PrintString
 332:main.c        **** 
 333:main.c        ****     currentStep++;
 342              		.loc 1 333 0
 343 0122 0F4B     		ldr	r3, .L16
 344 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345 0126 0133     		adds	r3, r3, #1
 346 0128 DAB2     		uxtb	r2, r3
 347 012a 0D4B     		ldr	r3, .L16
 348 012c 1A70     		strb	r2, [r3]
 334:main.c        ****        // LED_B_Write(!LED_B_Read());
 335:main.c        ****     /* Disable for now since this fails    
 336:main.c        ****     if(VerifyProtectionSettings() == FAILURE)
 337:main.c        ****         return(FAILURE);
 338:main.c        ****     LCD_Char_Position(0,0);
 339:main.c        ****     LCD_Char_PrintString("Verify Prot   OK");
 340:main.c        **** */
 341:main.c        ****     currentStep++;
 349              		.loc 1 341 0
 350 012e 0C4B     		ldr	r3, .L16
 351 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 0132 0133     		adds	r3, r3, #1
 353 0134 DAB2     		uxtb	r2, r3
 354 0136 0A4B     		ldr	r3, .L16
 355 0138 1A70     		strb	r2, [r3]
 342:main.c        ****        // LED_B_Write(!LED_B_Read());
 343:main.c        ****     if(VerifyChecksum() == FAILURE) 
 356              		.loc 1 343 0
 357 013a FFF7FEFF 		bl	VerifyChecksum
 358 013e 0346     		mov	r3, r0
 359 0140 002B     		cmp	r3, #0
 360 0142 01D1     		bne	.L15
 344:main.c        ****         return(FAILURE);
 361              		.loc 1 344 0
 362 0144 0023     		movs	r3, #0
 363 0146 09E0     		b	.L8
 364              	.L15:
 345:main.c        ****         LCD_Char_Position(0,0);
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 14


 365              		.loc 1 345 0
 366 0148 0020     		movs	r0, #0
 367 014a 0021     		movs	r1, #0
 368 014c FFF7FEFF 		bl	LCD_Char_Position
 346:main.c        ****     LCD_Char_PrintString("Verify ChkSum OK");
 369              		.loc 1 346 0
 370 0150 0B48     		ldr	r0, .L16+32
 371 0152 FFF7FEFF 		bl	LCD_Char_PrintString
 347:main.c        **** 
 348:main.c        ****     ExitProgrammingMode();
 372              		.loc 1 348 0
 373 0156 FFF7FEFF 		bl	ExitProgrammingMode
 349:main.c        ****     
 350:main.c        **** 	/* All the steps were completed successfully */
 351:main.c        ****     return(SUCCESS);
 374              		.loc 1 351 0
 375 015a 0123     		movs	r3, #1
 376              	.L8:
 352:main.c        **** }
 377              		.loc 1 352 0
 378 015c 1846     		mov	r0, r3
 379 015e 80BD     		pop	{r7, pc}
 380              	.L17:
 381              		.align	2
 382              	.L16:
 383 0160 00000000 		.word	currentStep
 384 0164 00000000 		.word	.LC0
 385 0168 14000000 		.word	.LC1
 386 016c 28000000 		.word	.LC2
 387 0170 3C000000 		.word	.LC3
 388 0174 50000000 		.word	.LC4
 389 0178 64000000 		.word	.LC5
 390 017c 78000000 		.word	.LC6
 391 0180 8C000000 		.word	.LC7
 392              		.cfi_endproc
 393              	.LFE64:
 394              		.size	ProgramDevice, .-ProgramDevice
 395              		.text
 396              	.Letext0:
 397              		.file 2 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 398              		.file 3 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 399              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 400              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 401              		.section	.debug_info,"",%progbits
 402              	.Ldebug_info0:
 403 0000 2C010000 		.4byte	0x12c
 404 0004 0400     		.2byte	0x4
 405 0006 00000000 		.4byte	.Ldebug_abbrev0
 406 000a 04       		.byte	0x4
 407 000b 01       		.uleb128 0x1
 408 000c AF000000 		.4byte	.LASF21
 409 0010 01       		.byte	0x1
 410 0011 2E000000 		.4byte	.LASF22
 411 0015 52010000 		.4byte	.LASF23
 412 0019 00000000 		.4byte	.Ldebug_ranges0+0
 413 001d 00000000 		.4byte	0
 414 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 15


 415 0025 02       		.uleb128 0x2
 416 0026 01       		.byte	0x1
 417 0027 06       		.byte	0x6
 418 0028 AC010000 		.4byte	.LASF0
 419 002c 02       		.uleb128 0x2
 420 002d 01       		.byte	0x1
 421 002e 08       		.byte	0x8
 422 002f 93000000 		.4byte	.LASF1
 423 0033 02       		.uleb128 0x2
 424 0034 02       		.byte	0x2
 425 0035 05       		.byte	0x5
 426 0036 D4010000 		.4byte	.LASF2
 427 003a 02       		.uleb128 0x2
 428 003b 02       		.byte	0x2
 429 003c 07       		.byte	0x7
 430 003d 0E000000 		.4byte	.LASF3
 431 0041 03       		.uleb128 0x3
 432 0042 B8010000 		.4byte	.LASF9
 433 0046 02       		.byte	0x2
 434 0047 3F       		.byte	0x3f
 435 0048 4C000000 		.4byte	0x4c
 436 004c 02       		.uleb128 0x2
 437 004d 04       		.byte	0x4
 438 004e 05       		.byte	0x5
 439 004f A6000000 		.4byte	.LASF4
 440 0053 02       		.uleb128 0x2
 441 0054 04       		.byte	0x4
 442 0055 07       		.byte	0x7
 443 0056 4E000000 		.4byte	.LASF5
 444 005a 02       		.uleb128 0x2
 445 005b 08       		.byte	0x8
 446 005c 05       		.byte	0x5
 447 005d 44010000 		.4byte	.LASF6
 448 0061 02       		.uleb128 0x2
 449 0062 08       		.byte	0x8
 450 0063 07       		.byte	0x7
 451 0064 70000000 		.4byte	.LASF7
 452 0068 04       		.uleb128 0x4
 453 0069 04       		.byte	0x4
 454 006a 05       		.byte	0x5
 455 006b 696E7400 		.ascii	"int\000"
 456 006f 02       		.uleb128 0x2
 457 0070 04       		.byte	0x4
 458 0071 07       		.byte	0x7
 459 0072 21000000 		.4byte	.LASF8
 460 0076 03       		.uleb128 0x3
 461 0077 DE010000 		.4byte	.LASF10
 462 007b 03       		.byte	0x3
 463 007c 2C       		.byte	0x2c
 464 007d 41000000 		.4byte	0x41
 465 0081 05       		.uleb128 0x5
 466 0082 48000000 		.4byte	.LASF11
 467 0086 04       		.byte	0x4
 468 0087 9201     		.2byte	0x192
 469 0089 2C000000 		.4byte	0x2c
 470 008d 02       		.uleb128 0x2
 471 008e 04       		.byte	0x4
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 16


 472 008f 04       		.byte	0x4
 473 0090 C2010000 		.4byte	.LASF12
 474 0094 02       		.uleb128 0x2
 475 0095 08       		.byte	0x8
 476 0096 04       		.byte	0x4
 477 0097 3D010000 		.4byte	.LASF13
 478 009b 02       		.uleb128 0x2
 479 009c 01       		.byte	0x1
 480 009d 08       		.byte	0x8
 481 009e A1000000 		.4byte	.LASF14
 482 00a2 02       		.uleb128 0x2
 483 00a3 04       		.byte	0x4
 484 00a4 07       		.byte	0x7
 485 00a5 E6010000 		.4byte	.LASF15
 486 00a9 06       		.uleb128 0x6
 487 00aa 35000000 		.4byte	.LASF24
 488 00ae 01       		.byte	0x1
 489 00af 6C       		.byte	0x6c
 490 00b0 68000000 		.4byte	0x68
 491 00b4 00000000 		.4byte	.LFB63
 492 00b8 A2000000 		.4byte	.LFE63-.LFB63
 493 00bc 01       		.uleb128 0x1
 494 00bd 9C       		.byte	0x9c
 495 00be F7000000 		.4byte	0xf7
 496 00c2 07       		.uleb128 0x7
 497 00c3 06000000 		.4byte	.LBB2
 498 00c7 9A000000 		.4byte	.LBE2-.LBB2
 499 00cb 08       		.uleb128 0x8
 500 00cc 3A000000 		.4byte	.LASF16
 501 00d0 01       		.byte	0x1
 502 00d1 71       		.byte	0x71
 503 00d2 2C000000 		.4byte	0x2c
 504 00d6 02       		.uleb128 0x2
 505 00d7 91       		.byte	0x91
 506 00d8 77       		.sleb128 -9
 507 00d9 08       		.uleb128 0x8
 508 00da 87000000 		.4byte	.LASF17
 509 00de 01       		.byte	0x1
 510 00df 74       		.byte	0x74
 511 00e0 2C000000 		.4byte	0x2c
 512 00e4 02       		.uleb128 0x2
 513 00e5 91       		.byte	0x91
 514 00e6 76       		.sleb128 -10
 515 00e7 08       		.uleb128 0x8
 516 00e8 60000000 		.4byte	.LASF18
 517 00ec 01       		.byte	0x1
 518 00ed 78       		.byte	0x78
 519 00ee 2C000000 		.4byte	0x2c
 520 00f2 02       		.uleb128 0x2
 521 00f3 91       		.byte	0x91
 522 00f4 75       		.sleb128 -11
 523 00f5 00       		.byte	0
 524 00f6 00       		.byte	0
 525 00f7 09       		.uleb128 0x9
 526 00f8 00000000 		.4byte	.LASF25
 527 00fc 01       		.byte	0x1
 528 00fd 1801     		.2byte	0x118
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 17


 529 00ff 2C000000 		.4byte	0x2c
 530 0103 00000000 		.4byte	.LFB64
 531 0107 84010000 		.4byte	.LFE64-.LFB64
 532 010b 01       		.uleb128 0x1
 533 010c 9C       		.byte	0x9c
 534 010d 0A       		.uleb128 0xa
 535 010e 9F010000 		.4byte	.LASF19
 536 0112 05       		.byte	0x5
 537 0113 9606     		.2byte	0x696
 538 0115 19010000 		.4byte	0x119
 539 0119 0B       		.uleb128 0xb
 540 011a 76000000 		.4byte	0x76
 541 011e 0C       		.uleb128 0xc
 542 011f C8010000 		.4byte	.LASF20
 543 0123 01       		.byte	0x1
 544 0124 4E       		.byte	0x4e
 545 0125 2C000000 		.4byte	0x2c
 546 0129 05       		.uleb128 0x5
 547 012a 03       		.byte	0x3
 548 012b 00000000 		.4byte	currentStep
 549 012f 00       		.byte	0
 550              		.section	.debug_abbrev,"",%progbits
 551              	.Ldebug_abbrev0:
 552 0000 01       		.uleb128 0x1
 553 0001 11       		.uleb128 0x11
 554 0002 01       		.byte	0x1
 555 0003 25       		.uleb128 0x25
 556 0004 0E       		.uleb128 0xe
 557 0005 13       		.uleb128 0x13
 558 0006 0B       		.uleb128 0xb
 559 0007 03       		.uleb128 0x3
 560 0008 0E       		.uleb128 0xe
 561 0009 1B       		.uleb128 0x1b
 562 000a 0E       		.uleb128 0xe
 563 000b 55       		.uleb128 0x55
 564 000c 17       		.uleb128 0x17
 565 000d 11       		.uleb128 0x11
 566 000e 01       		.uleb128 0x1
 567 000f 10       		.uleb128 0x10
 568 0010 17       		.uleb128 0x17
 569 0011 00       		.byte	0
 570 0012 00       		.byte	0
 571 0013 02       		.uleb128 0x2
 572 0014 24       		.uleb128 0x24
 573 0015 00       		.byte	0
 574 0016 0B       		.uleb128 0xb
 575 0017 0B       		.uleb128 0xb
 576 0018 3E       		.uleb128 0x3e
 577 0019 0B       		.uleb128 0xb
 578 001a 03       		.uleb128 0x3
 579 001b 0E       		.uleb128 0xe
 580 001c 00       		.byte	0
 581 001d 00       		.byte	0
 582 001e 03       		.uleb128 0x3
 583 001f 16       		.uleb128 0x16
 584 0020 00       		.byte	0
 585 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 18


 586 0022 0E       		.uleb128 0xe
 587 0023 3A       		.uleb128 0x3a
 588 0024 0B       		.uleb128 0xb
 589 0025 3B       		.uleb128 0x3b
 590 0026 0B       		.uleb128 0xb
 591 0027 49       		.uleb128 0x49
 592 0028 13       		.uleb128 0x13
 593 0029 00       		.byte	0
 594 002a 00       		.byte	0
 595 002b 04       		.uleb128 0x4
 596 002c 24       		.uleb128 0x24
 597 002d 00       		.byte	0
 598 002e 0B       		.uleb128 0xb
 599 002f 0B       		.uleb128 0xb
 600 0030 3E       		.uleb128 0x3e
 601 0031 0B       		.uleb128 0xb
 602 0032 03       		.uleb128 0x3
 603 0033 08       		.uleb128 0x8
 604 0034 00       		.byte	0
 605 0035 00       		.byte	0
 606 0036 05       		.uleb128 0x5
 607 0037 16       		.uleb128 0x16
 608 0038 00       		.byte	0
 609 0039 03       		.uleb128 0x3
 610 003a 0E       		.uleb128 0xe
 611 003b 3A       		.uleb128 0x3a
 612 003c 0B       		.uleb128 0xb
 613 003d 3B       		.uleb128 0x3b
 614 003e 05       		.uleb128 0x5
 615 003f 49       		.uleb128 0x49
 616 0040 13       		.uleb128 0x13
 617 0041 00       		.byte	0
 618 0042 00       		.byte	0
 619 0043 06       		.uleb128 0x6
 620 0044 2E       		.uleb128 0x2e
 621 0045 01       		.byte	0x1
 622 0046 3F       		.uleb128 0x3f
 623 0047 19       		.uleb128 0x19
 624 0048 03       		.uleb128 0x3
 625 0049 0E       		.uleb128 0xe
 626 004a 3A       		.uleb128 0x3a
 627 004b 0B       		.uleb128 0xb
 628 004c 3B       		.uleb128 0x3b
 629 004d 0B       		.uleb128 0xb
 630 004e 49       		.uleb128 0x49
 631 004f 13       		.uleb128 0x13
 632 0050 11       		.uleb128 0x11
 633 0051 01       		.uleb128 0x1
 634 0052 12       		.uleb128 0x12
 635 0053 06       		.uleb128 0x6
 636 0054 40       		.uleb128 0x40
 637 0055 18       		.uleb128 0x18
 638 0056 9642     		.uleb128 0x2116
 639 0058 19       		.uleb128 0x19
 640 0059 01       		.uleb128 0x1
 641 005a 13       		.uleb128 0x13
 642 005b 00       		.byte	0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 19


 643 005c 00       		.byte	0
 644 005d 07       		.uleb128 0x7
 645 005e 0B       		.uleb128 0xb
 646 005f 01       		.byte	0x1
 647 0060 11       		.uleb128 0x11
 648 0061 01       		.uleb128 0x1
 649 0062 12       		.uleb128 0x12
 650 0063 06       		.uleb128 0x6
 651 0064 00       		.byte	0
 652 0065 00       		.byte	0
 653 0066 08       		.uleb128 0x8
 654 0067 34       		.uleb128 0x34
 655 0068 00       		.byte	0
 656 0069 03       		.uleb128 0x3
 657 006a 0E       		.uleb128 0xe
 658 006b 3A       		.uleb128 0x3a
 659 006c 0B       		.uleb128 0xb
 660 006d 3B       		.uleb128 0x3b
 661 006e 0B       		.uleb128 0xb
 662 006f 49       		.uleb128 0x49
 663 0070 13       		.uleb128 0x13
 664 0071 02       		.uleb128 0x2
 665 0072 18       		.uleb128 0x18
 666 0073 00       		.byte	0
 667 0074 00       		.byte	0
 668 0075 09       		.uleb128 0x9
 669 0076 2E       		.uleb128 0x2e
 670 0077 00       		.byte	0
 671 0078 3F       		.uleb128 0x3f
 672 0079 19       		.uleb128 0x19
 673 007a 03       		.uleb128 0x3
 674 007b 0E       		.uleb128 0xe
 675 007c 3A       		.uleb128 0x3a
 676 007d 0B       		.uleb128 0xb
 677 007e 3B       		.uleb128 0x3b
 678 007f 05       		.uleb128 0x5
 679 0080 27       		.uleb128 0x27
 680 0081 19       		.uleb128 0x19
 681 0082 49       		.uleb128 0x49
 682 0083 13       		.uleb128 0x13
 683 0084 11       		.uleb128 0x11
 684 0085 01       		.uleb128 0x1
 685 0086 12       		.uleb128 0x12
 686 0087 06       		.uleb128 0x6
 687 0088 40       		.uleb128 0x40
 688 0089 18       		.uleb128 0x18
 689 008a 9642     		.uleb128 0x2116
 690 008c 19       		.uleb128 0x19
 691 008d 00       		.byte	0
 692 008e 00       		.byte	0
 693 008f 0A       		.uleb128 0xa
 694 0090 34       		.uleb128 0x34
 695 0091 00       		.byte	0
 696 0092 03       		.uleb128 0x3
 697 0093 0E       		.uleb128 0xe
 698 0094 3A       		.uleb128 0x3a
 699 0095 0B       		.uleb128 0xb
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 20


 700 0096 3B       		.uleb128 0x3b
 701 0097 05       		.uleb128 0x5
 702 0098 49       		.uleb128 0x49
 703 0099 13       		.uleb128 0x13
 704 009a 3F       		.uleb128 0x3f
 705 009b 19       		.uleb128 0x19
 706 009c 3C       		.uleb128 0x3c
 707 009d 19       		.uleb128 0x19
 708 009e 00       		.byte	0
 709 009f 00       		.byte	0
 710 00a0 0B       		.uleb128 0xb
 711 00a1 35       		.uleb128 0x35
 712 00a2 00       		.byte	0
 713 00a3 49       		.uleb128 0x49
 714 00a4 13       		.uleb128 0x13
 715 00a5 00       		.byte	0
 716 00a6 00       		.byte	0
 717 00a7 0C       		.uleb128 0xc
 718 00a8 34       		.uleb128 0x34
 719 00a9 00       		.byte	0
 720 00aa 03       		.uleb128 0x3
 721 00ab 0E       		.uleb128 0xe
 722 00ac 3A       		.uleb128 0x3a
 723 00ad 0B       		.uleb128 0xb
 724 00ae 3B       		.uleb128 0x3b
 725 00af 0B       		.uleb128 0xb
 726 00b0 49       		.uleb128 0x49
 727 00b1 13       		.uleb128 0x13
 728 00b2 3F       		.uleb128 0x3f
 729 00b3 19       		.uleb128 0x19
 730 00b4 02       		.uleb128 0x2
 731 00b5 18       		.uleb128 0x18
 732 00b6 00       		.byte	0
 733 00b7 00       		.byte	0
 734 00b8 00       		.byte	0
 735              		.section	.debug_aranges,"",%progbits
 736 0000 24000000 		.4byte	0x24
 737 0004 0200     		.2byte	0x2
 738 0006 00000000 		.4byte	.Ldebug_info0
 739 000a 04       		.byte	0x4
 740 000b 00       		.byte	0
 741 000c 0000     		.2byte	0
 742 000e 0000     		.2byte	0
 743 0010 00000000 		.4byte	.LFB63
 744 0014 A2000000 		.4byte	.LFE63-.LFB63
 745 0018 00000000 		.4byte	.LFB64
 746 001c 84010000 		.4byte	.LFE64-.LFB64
 747 0020 00000000 		.4byte	0
 748 0024 00000000 		.4byte	0
 749              		.section	.debug_ranges,"",%progbits
 750              	.Ldebug_ranges0:
 751 0000 00000000 		.4byte	.LFB63
 752 0004 A2000000 		.4byte	.LFE63
 753 0008 00000000 		.4byte	.LFB64
 754 000c 84010000 		.4byte	.LFE64
 755 0010 00000000 		.4byte	0
 756 0014 00000000 		.4byte	0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 21


 757              		.section	.debug_line,"",%progbits
 758              	.Ldebug_line0:
 759 0000 C0010000 		.section	.debug_str,"MS",%progbits,1
 759      02003B01 
 759      00000201 
 759      FB0E0D00 
 759      01010101 
 760              	.LASF25:
 761 0000 50726F67 		.ascii	"ProgramDevice\000"
 761      72616D44 
 761      65766963 
 761      6500
 762              	.LASF3:
 763 000e 73686F72 		.ascii	"short unsigned int\000"
 763      7420756E 
 763      7369676E 
 763      65642069 
 763      6E7400
 764              	.LASF8:
 765 0021 756E7369 		.ascii	"unsigned int\000"
 765      676E6564 
 765      20696E74 
 765      00
 766              	.LASF22:
 767 002e 6D61696E 		.ascii	"main.c\000"
 767      2E6300
 768              	.LASF24:
 769 0035 6D61696E 		.ascii	"main\000"
 769      00
 770              	.LASF16:
 771 003a 70726F67 		.ascii	"programResult\000"
 771      72616D52 
 771      6573756C 
 771      7400
 772              	.LASF11:
 773 0048 75696E74 		.ascii	"uint8\000"
 773      3800
 774              	.LASF5:
 775 004e 6C6F6E67 		.ascii	"long unsigned int\000"
 775      20756E73 
 775      69676E65 
 775      6420696E 
 775      7400
 776              	.LASF18:
 777 0060 73726F6D 		.ascii	"sromErrorStatus\000"
 777      4572726F 
 777      72537461 
 777      74757300 
 778              	.LASF7:
 779 0070 6C6F6E67 		.ascii	"long long unsigned int\000"
 779      206C6F6E 
 779      6720756E 
 779      7369676E 
 779      65642069 
 780              	.LASF17:
 781 0087 6572726F 		.ascii	"errorStatus\000"
 781      72537461 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 22


 781      74757300 
 782              	.LASF1:
 783 0093 756E7369 		.ascii	"unsigned char\000"
 783      676E6564 
 783      20636861 
 783      7200
 784              	.LASF14:
 785 00a1 63686172 		.ascii	"char\000"
 785      00
 786              	.LASF4:
 787 00a6 6C6F6E67 		.ascii	"long int\000"
 787      20696E74 
 787      00
 788              	.LASF21:
 789 00af 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 789      4320342E 
 789      392E3320 
 789      32303135 
 789      30333033 
 790 00e2 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 790      20726576 
 790      6973696F 
 790      6E203232 
 790      31323230 
 791 0115 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 791      66756E63 
 791      74696F6E 
 791      2D736563 
 791      74696F6E 
 792              	.LASF13:
 793 013d 646F7562 		.ascii	"double\000"
 793      6C6500
 794              	.LASF6:
 795 0144 6C6F6E67 		.ascii	"long long int\000"
 795      206C6F6E 
 795      6720696E 
 795      7400
 796              	.LASF23:
 797 0152 443A5C55 		.ascii	"D:\\Users\\WorkBench\\Documents\\GitHub\\BackboneHS"
 797      73657273 
 797      5C576F72 
 797      6B42656E 
 797      63685C44 
 798 0180 53505C50 		.ascii	"SP\\Programmer\\Programmer.cydsn\000"
 798      726F6772 
 798      616D6D65 
 798      725C5072 
 798      6F677261 
 799              	.LASF19:
 800 019f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 800      52784275 
 800      66666572 
 800      00
 801              	.LASF0:
 802 01ac 7369676E 		.ascii	"signed char\000"
 802      65642063 
 802      68617200 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc2TdMaX.s 			page 23


 803              	.LASF9:
 804 01b8 5F5F696E 		.ascii	"__int32_t\000"
 804      7433325F 
 804      7400
 805              	.LASF12:
 806 01c2 666C6F61 		.ascii	"float\000"
 806      7400
 807              	.LASF20:
 808 01c8 63757272 		.ascii	"currentStep\000"
 808      656E7453 
 808      74657000 
 809              	.LASF2:
 810 01d4 73686F72 		.ascii	"short int\000"
 810      7420696E 
 810      7400
 811              	.LASF10:
 812 01de 696E7433 		.ascii	"int32_t\000"
 812      325F7400 
 813              	.LASF15:
 814 01e6 73697A65 		.ascii	"sizetype\000"
 814      74797065 
 814      00
 815              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
