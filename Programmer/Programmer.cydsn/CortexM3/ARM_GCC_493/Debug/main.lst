ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	currentStep,1,1
  19              		.section	.text.main,"ax",%progbits
  20              		.align	2
  21              		.global	main
  22              		.thumb
  23              		.thumb_func
  24              		.type	main, %function
  25              	main:
  26              	.LFB63:
  27              		.file 1 "main.c"
   1:main.c        **** /******************************************************************************
   2:main.c        **** 
   3:main.c        **** 
   4:main.c        **** *******************************************************************************
   5:main.c        **** *  Project Name: A_Hssp_Programmer
   6:main.c        **** *  Project Revision: 1.00
   7:main.c        **** *  Software Version: PSoC Creator 3.3
   8:main.c        **** *  Device Tested: CY8C5868AXI-LP035
   9:main.c        **** *  Compilers Tested: ARM GCC 4.9-2015-q1-update
  10:main.c        **** *  Related Hardware: CY8CKIT-050
  11:main.c        **** ******************************************************************************/
  12:main.c        **** 
  13:main.c        **** /******************************************************************************
  14:main.c        **** * Project Description:
  15:main.c        **** * This is a sample HSSP implmentation demonstrating a PSoC 5LP programming
  16:main.c        **** * PSoC 4. The project is tested using CY8CKIT-050 with PSoC 5LP chip and 
  17:main.c        **** * CY8CKIT-001 with PSoC 4 processor module.
  18:main.c        **** *
  19:main.c        **** * Connections Required
  20:main.c        **** * CY8CKIT-050 (PSoC 5LP DVK) :
  21:main.c        **** *  Pin_SWDIO (P0[0])- This pin is connected to SWDIO (Debug pin) of PSoC 4 kit.
  22:main.c        **** *  Pin_SWDCK (P0[1])- This pin is connected to SWDCK (Debug pin) of PSoC 4 kit.
  23:main.c        **** *  Pin_XRES  (P0[2])- This pin is connected to XRES input of PSoC kit.
  24:main.c        **** *  Pin_Start (P6[1])- This pin is internally connected to switch SW2.
  25:main.c        **** *
  26:main.c        **** * Note that the GNDs of both DVKs should be connected together and Power should
  27:main.c        **** * be supplied from a single source.
  28:main.c        **** *
  29:main.c        **** * The hex file included in this project toggles pin P1[6] of PSoC 4 at 1Hz
  30:main.c        **** * frequency and displays “PSoC Programmed” on the character LCD mounted on
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 2


  31:main.c        **** * CY8CKIT-001 DVK.
  32:main.c        **** * 
  33:main.c        **** * Connections required on the CY8CKIT-001 with PSoC 4 Processor Module :
  34:main.c        **** * 	1. Connect P1[6] to LED1
  35:main.c        **** *	2. Mount character LCD on the kit
  36:main.c        **** *
  37:main.c        **** * Press SW2 on the PSoC 5LP DVK to start the programming operation.
  38:main.c        **** * ProgramDevice() function in main.c calls all the programming steps
  39:main.c        **** * sequentially to program PSoC 4.
  40:main.c        **** *
  41:main.c        **** * main.c checks the result of ProgramDevice() function and if it returns 
  42:main.c        **** * SUCCESS, "HSSP Success" is displayed on the character LCD mounted on the
  43:main.c        **** * PSoC 5LP kit. If ProgramDevice() returns failure, Step of failure, Reason
  44:main.c        **** * of failure is displayed on the LCD. If the error is because of SROM, It
  45:main.c        **** * displays the SROM error code.
  46:main.c        **** *
  47:main.c        **** * On the PSoC 4 Side, LED connected to P1[6] starts to toggle at 1 Hz
  48:main.c        **** * frequency and character LCD displays the message after successful 
  49:main.c        **** * programming.
  50:main.c        **** *
  51:main.c        **** * Note:
  52:main.c        **** *  The Character LCD functions and the Pin_Start APIs in the main() function
  53:main.c        **** *  are for PSoC 5LP host programmer. If you are using any other microcontroller,
  54:main.c        **** *  replace the functions with the APIs supported by the host or change the macro
  55:main.c        **** *  USE_LCD and USE_START_PIN to 0 to remove all LCD and Pin_Start functions.
  56:main.c        **** ******************************************************************************/
  57:main.c        **** 
  58:main.c        **** /* This file is included for calling Character LCD and Pin_Start APIs in
  59:main.c        ****    PSoC 5LP. Remove this header file while porting to non PSoC 5LP host
  60:main.c        ****    programmer */
  61:main.c        **** #include <device.h>
  62:main.c        **** 
  63:main.c        **** #include <project.h>
  64:main.c        **** 
  65:main.c        **** /* These macros are used to remove all LCD and Pin_Start functions while
  66:main.c        ****    porting this code to non PSoC 5LP host programmer */
  67:main.c        **** #define USE_LCD 		0
  68:main.c        **** #define USE_START_PIN 	1
  69:main.c        **** 
  70:main.c        **** /* This file has the top level HSSP routines that should be called from main
  71:main.c        ****    application code */
  72:main.c        **** #include "ProgrammingSteps.h"
  73:main.c        **** 
  74:main.c        **** /* Function which sequentially calls all the programming steps */
  75:main.c        **** unsigned char ProgramDevice(void);
  76:main.c        **** 
  77:main.c        **** /* Global variable which stores the current programming step under execution */
  78:main.c        **** unsigned char currentStep;
  79:main.c        **** 
  80:main.c        **** /* Slave address of the EZI2C */
  81:main.c        **** //#define EZI2C_SLAVE_ADDR        (0x08u)
  82:main.c        **** //#define BUFFER_SIZE             (0x04u)
  83:main.c        **** //#define BUFFER_RW_AREA_SIZE     (0x02u)
  84:main.c        **** 
  85:main.c        **** /* Denotes the offset inside the EZI2C buffer */
  86:main.c        **** //#define SLAVE_ADDR_SIZE         (0x01u)
  87:main.c        **** 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 3


  88:main.c        **** //#define ACTION_SELECT_NONE      (0x00u)     /* Do nothing       */
  89:main.c        **** //#define ACTION_SELECT_WRITE     (0x01u)     /* Write to EZI2C   */
  90:main.c        **** //#define ACTION_SELECT_READ      (0x02u)     /* Read from EZI2C  */
  91:main.c        **** 
  92:main.c        **** /* Desing interrupt handlers for SW1 and SW2 event */
  93:main.c        **** CY_ISR_PROTO(ISR_WriteSW1_Interrupt);
  94:main.c        **** CY_ISR_PROTO(ISR_ReadSW2_Interrupt);
  95:main.c        **** 
  96:main.c        **** /* EZI2C buffer */
  97:main.c        **** //uint8   ezi2cBuffer[BUFFER_SIZE];
  98:main.c        **** 
  99:main.c        **** /* I2C buffer with the data read from EZI2C */
 100:main.c        **** //uint8   i2cBufferRead[BUFFER_SIZE];
 101:main.c        **** 
 102:main.c        **** /* I2C buffer with the data to be written to EZI2C */
 103:main.c        **** //uint8   i2cBufferWrite[SLAVE_ADDR_SIZE + BUFFER_SIZE];
 104:main.c        **** 
 105:main.c        **** /* Initialize action variable */
 106:main.c        **** //volatile uint8 actionSelect = ACTION_SELECT_NONE;
 107:main.c        **** 
 108:main.c        **** int main()
 109:main.c        **** {
  28              		.loc 1 109 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40              	.L5:
  41              	.LBB2:
 110:main.c        ****     for( ; ; )
 111:main.c        ****     {
 112:main.c        ****     /* Variable to store the result of HSSP operation */
 113:main.c        ****     unsigned char programResult;   
 114:main.c        **** 	
 115:main.c        **** 	/* Variable to store the HSSP Error status in case of failure */
 116:main.c        ****     unsigned char errorStatus; 
 117:main.c        **** 	
 118:main.c        **** 	/* Variable to store the SROM Error status if errorStatus contains
 119:main.c        **** 	   SROM_TIMEOUT_ERROR error */
 120:main.c        ****     unsigned char sromErrorStatus;
 121:main.c        **** 	
 122:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 123:main.c        **** 	if(USE_LCD)
 124:main.c        **** 	{
 125:main.c        **** 		/* Initialize Character LCD  */
 126:main.c        **** 	    LCD_Char_Start();
 127:main.c        **** 		
 128:main.c        **** 		/* Display the message */
 129:main.c        **** 		LCD_Char_Position(0,0);
 130:main.c        **** 		LCD_Char_PrintString("Press SWITCH SW2");
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 4


 131:main.c        **** 	}
 132:main.c        ****     
 133:main.c        **** 	/* Set USE_START_PIN macro to 0 if PSoC 5LP is not used as host
 134:main.c        **** 	   microcontroller */
 135:main.c        **** 	if(USE_START_PIN)
 136:main.c        **** 	{
 137:main.c        **** 		while (Pin_Start_Read() == 1);
  42              		.loc 1 137 0
  43 0006 00BF     		nop
  44              	.L2:
  45              		.loc 1 137 0 is_stmt 0 discriminator 1
  46 0008 FFF7FEFF 		bl	Pin_Start_Read
  47 000c 0346     		mov	r3, r0
  48 000e 012B     		cmp	r3, #1
  49 0010 FAD0     		beq	.L2
 138:main.c        **** 	}
 139:main.c        **** 	
 140:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 141:main.c        **** 	if(USE_LCD)
 142:main.c        **** 	{
 143:main.c        **** 		/* Clear Character LCD  */
 144:main.c        **** 		LCD_Char_ClearDisplay();
 145:main.c        **** 		
 146:main.c        **** 		/* Display the message */
 147:main.c        **** 	    LCD_Char_Position(0,0);
 148:main.c        **** 	    LCD_Char_PrintString("Programming PSoC4");
 149:main.c        **** 	}
 150:main.c        ****     
 151:main.c        ****     LED_R_Write(0);
  50              		.loc 1 151 0 is_stmt 1
  51 0012 0020     		movs	r0, #0
  52 0014 FFF7FEFF 		bl	LED_R_Write
 152:main.c        ****     LED_G_Write(0);
  53              		.loc 1 152 0
  54 0018 0020     		movs	r0, #0
  55 001a FFF7FEFF 		bl	LED_G_Write
 153:main.c        ****     LED_B_Write(0);
  56              		.loc 1 153 0
  57 001e 0020     		movs	r0, #0
  58 0020 FFF7FEFF 		bl	LED_B_Write
 154:main.c        ****     LED_R_GND_Write(0);
  59              		.loc 1 154 0
  60 0024 0020     		movs	r0, #0
  61 0026 FFF7FEFF 		bl	LED_R_GND_Write
 155:main.c        ****     /* Write a byte to a Control Register */
 156:main.c        ****     Control_Reg_Write(0x00u); //Enables PWM
  62              		.loc 1 156 0
  63 002a 0020     		movs	r0, #0
  64 002c FFF7FEFF 		bl	Control_Reg_Write
 157:main.c        ****     PWM_Start();
  65              		.loc 1 157 0
  66 0030 FFF7FEFF 		bl	PWM_Start
 158:main.c        ****        
 159:main.c        ****     /* Start EZI2C */
 160:main.c        ****    // EZI2C_Start();
 161:main.c        ****     
 162:main.c        ****     /* Enable global interrupts */
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 5


 163:main.c        ****     CyGlobalIntEnable;
  67              		.loc 1 163 0
  68              	@ 163 "main.c" 1
  69 0034 62B6     		CPSIE   i
  70              	@ 0 "" 2
 164:main.c        ****     
 165:main.c        ****     /* Initialize EZI2C buffer's read only data */
 166:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE     ] = 0xAAu;
 167:main.c        ****     //ezi2cBuffer[BUFFER_RW_AREA_SIZE + 1u] = 0xBBu;
 168:main.c        **** 
 169:main.c        ****     /***************************************************************************
 170:main.c        ****     * The first parameter sets the size of the exposed memory to the I2C
 171:main.c        ****     * interface. In this case, it is the entire array. The second parameter sets
 172:main.c        ****     * the boundary between the read/write and read only areas by setting the
 173:main.c        ****     * number of bytes in the read/write area. The read/write area is first,
 174:main.c        ****     * followed by the read only area. In this case, only the first
 175:main.c        ****     * BUFFER_RW_AREA_SIZE bytes may be written, but all bytes may be read by the
 176:main.c        ****     * I2C master. The third parameter is a pointer to the data.
 177:main.c        ****     ***************************************************************************/
 178:main.c        ****     //EZI2C_SetBuffer1(BUFFER_SIZE, BUFFER_RW_AREA_SIZE, (void *) ezi2cBuffer);
 179:main.c        **** 
 180:main.c        **** 
 181:main.c        ****     /* Start the HSSP Programming and store the status */
 182:main.c        ****     programResult = ProgramDevice();
  71              		.loc 1 182 0
  72              		.thumb
  73 0036 FFF7FEFF 		bl	ProgramDevice
  74 003a 0346     		mov	r3, r0
  75 003c FB71     		strb	r3, [r7, #7]
 183:main.c        ****     
 184:main.c        **** 	/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 185:main.c        **** 	if(USE_LCD)
 186:main.c        **** 	{
 187:main.c        **** 	    /* Character LCD will display the status of HSSP Programming  */
 188:main.c        **** 	    LCD_Char_ClearDisplay();
 189:main.c        **** 	}
 190:main.c        ****     /* Write a byte to a Control Register */
 191:main.c        ****     Control_Reg_Write(0x01u); //Kills PWM
  76              		.loc 1 191 0
  77 003e 0120     		movs	r0, #1
  78 0040 FFF7FEFF 		bl	Control_Reg_Write
 192:main.c        ****     PWM_Stop();
  79              		.loc 1 192 0
  80 0044 FFF7FEFF 		bl	PWM_Stop
 193:main.c        ****     LED_B_Write(0); //Turn Blue LED OFF
  81              		.loc 1 193 0
  82 0048 0020     		movs	r0, #0
  83 004a FFF7FEFF 		bl	LED_B_Write
 194:main.c        ****     
 195:main.c        **** 	/* HSSP completed successfully */
 196:main.c        ****     if(programResult == SUCCESS) 
  84              		.loc 1 196 0
  85 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  86 0050 012B     		cmp	r3, #1
  87 0052 03D1     		bne	.L3
 197:main.c        ****     {
 198:main.c        **** 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 6


 199:main.c        ****         LED_G_Write(1);
  88              		.loc 1 199 0
  89 0054 0120     		movs	r0, #1
  90 0056 FFF7FEFF 		bl	LED_G_Write
  91 005a 12E0     		b	.L4
  92              	.L3:
 200:main.c        ****         
 201:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 202:main.c        ****         if(USE_LCD)
 203:main.c        **** 		{
 204:main.c        **** 			LCD_Char_Position(0,0);
 205:main.c        ****         	LCD_Char_PrintString("HSSP Success");
 206:main.c        ****     	}
 207:main.c        **** 	}
 208:main.c        **** 	
 209:main.c        **** 	/* HSSP Failure */
 210:main.c        ****     else
 211:main.c        ****     {
 212:main.c        ****         LED_R_Write(1);
  93              		.loc 1 212 0
  94 005c 0120     		movs	r0, #1
  95 005e FFF7FEFF 		bl	LED_R_Write
 213:main.c        ****         LED_R_GND_Write(0);
  96              		.loc 1 213 0
  97 0062 0020     		movs	r0, #0
  98 0064 FFF7FEFF 		bl	LED_R_GND_Write
 214:main.c        **** 
 215:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 216:main.c        ****         if(USE_LCD)
 217:main.c        **** 		{
 218:main.c        **** 			/* Display the step number where the HSSP failed */
 219:main.c        **** 	        LCD_Char_Position(0,0);
 220:main.c        **** 	        LCD_Char_PrintString("HSSP Fail Step");
 221:main.c        **** 	        LCD_Char_PrintInt8(currentStep);
 222:main.c        **** 		}
 223:main.c        ****         		
 224:main.c        ****         /* Get the HSSP error status and display on THE LCD */
 225:main.c        ****         errorStatus = ReadHsspErrorStatus();
  99              		.loc 1 225 0
 100 0068 FFF7FEFF 		bl	ReadHsspErrorStatus
 101 006c 0346     		mov	r3, r0
 102 006e BB71     		strb	r3, [r7, #6]
 226:main.c        ****         
 227:main.c        **** 		/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 228:main.c        **** 		if(USE_LCD)
 229:main.c        **** 		{
 230:main.c        **** 	        LCD_Char_Position(1,0);
 231:main.c        **** 	        LCD_Char_PrintString("Err ");
 232:main.c        **** 	        LCD_Char_PrintInt8(errorStatus);
 233:main.c        **** 		}
 234:main.c        ****         
 235:main.c        ****         /* If the errorStatus contains THE SROM_TIMEOUT_ERROR error condition,
 236:main.c        ****            read the Status Code returned by CPUSS_SYSARG register and display
 237:main.c        **** 		   on THE LCD */
 238:main.c        ****         if(errorStatus & SROM_TIMEOUT_ERROR)
 103              		.loc 1 238 0
 104 0070 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 7


 105 0072 03F02003 		and	r3, r3, #32
 106 0076 002B     		cmp	r3, #0
 107 0078 03D0     		beq	.L4
 239:main.c        ****         {
 240:main.c        ****             sromErrorStatus = ReadSromStatus();
 108              		.loc 1 240 0
 109 007a FFF7FEFF 		bl	ReadSromStatus
 110 007e 0346     		mov	r3, r0
 111 0080 7B71     		strb	r3, [r7, #5]
 112              	.L4:
 113              	.LBE2:
 241:main.c        ****             
 242:main.c        **** 			/* Set USE_LCD macro to 0 if PSoC 5LP is not used as host microcontroller */
 243:main.c        **** 			if(USE_LCD)
 244:main.c        **** 			{
 245:main.c        **** 				LCD_Char_PrintString(" SROM ");
 246:main.c        **** 				LCD_Char_PrintInt8(sromErrorStatus);
 247:main.c        **** 			}
 248:main.c        ****         }
 249:main.c        ****     }
 250:main.c        **** 
 251:main.c        **** 
 252:main.c        ****         /* Do Nothing */
 253:main.c        ****     }
 114              		.loc 1 253 0 discriminator 1
 115 0082 C0E7     		b	.L5
 116              		.cfi_endproc
 117              	.LFE63:
 118              		.size	main, .-main
 119              		.section	.rodata
 120              		.align	2
 121              	.LC0:
 122 0000 44657620 		.ascii	"Dev Acquire   OK\000"
 122      41637175 
 122      69726520 
 122      20204F4B 
 122      00
 123 0011 000000   		.align	2
 124              	.LC1:
 125 0014 56657269 		.ascii	"Verify Sil    OK\000"
 125      66792053 
 125      696C2020 
 125      20204F4B 
 125      00
 126 0025 000000   		.align	2
 127              	.LC2:
 128 0028 45726173 		.ascii	"Erase All     OK\000"
 128      6520416C 
 128      6C202020 
 128      20204F4B 
 128      00
 129 0039 000000   		.align	2
 130              	.LC3:
 131 003c 43686B53 		.ascii	"ChkSumPrv     OK\000"
 131      756D5072 
 131      76202020 
 131      20204F4B 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 8


 131      00
 132 004d 000000   		.align	2
 133              	.LC4:
 134 0050 50726F67 		.ascii	"Program Flash OK\000"
 134      72616D20 
 134      466C6173 
 134      68204F4B 
 134      00
 135 0061 000000   		.align	2
 136              	.LC5:
 137 0064 56657269 		.ascii	"Verify Flash  OK\000"
 137      66792046 
 137      6C617368 
 137      20204F4B 
 137      00
 138 0075 000000   		.align	2
 139              	.LC6:
 140 0078 50726720 		.ascii	"Prg Protect   OK\000"
 140      50726F74 
 140      65637420 
 140      20204F4B 
 140      00
 141 0089 000000   		.align	2
 142              	.LC7:
 143 008c 56657269 		.ascii	"Verify ChkSum OK\000"
 143      66792043 
 143      686B5375 
 143      6D204F4B 
 143      00
 144 009d 000000   		.section	.text.ProgramDevice,"ax",%progbits
 145              		.align	2
 146              		.global	ProgramDevice
 147              		.thumb
 148              		.thumb_func
 149              		.type	ProgramDevice, %function
 150              	ProgramDevice:
 151              	.LFB64:
 254:main.c        **** }
 255:main.c        **** 
 256:main.c        **** /******************************************************************************
 257:main.c        **** * Function Name: unsigned char ProgramDevice(void)
 258:main.c        **** *******************************************************************************
 259:main.c        **** * Summary:
 260:main.c        **** *  This function sequentially calls all the functions required to program a
 261:main.c        **** *  PSoC 4. These functions are defined in ProgrammingSteps.h.
 262:main.c        **** *
 263:main.c        **** * Parameters:
 264:main.c        **** *  None.
 265:main.c        **** *
 266:main.c        **** * Return:
 267:main.c        **** *  SUCCESS - All the programming steps executed successfully
 268:main.c        **** *  FAILURE - HSSP programming fails in any one of the programming step
 269:main.c        **** *
 270:main.c        **** ******************************************************************************/
 271:main.c        **** unsigned char ProgramDevice()
 272:main.c        **** {
 152              		.loc 1 272 0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 9


 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 80B5     		push	{r7, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 160 0002 00AF     		add	r7, sp, #0
 161              		.cfi_def_cfa_register 7
 273:main.c        ****     currentStep = 0;
 162              		.loc 1 273 0
 163 0004 564B     		ldr	r3, .L16
 164 0006 0022     		movs	r2, #0
 165 0008 1A70     		strb	r2, [r3]
 274:main.c        ****     
 275:main.c        ****     currentStep++;    
 166              		.loc 1 275 0
 167 000a 554B     		ldr	r3, .L16
 168 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 169 000e 0133     		adds	r3, r3, #1
 170 0010 DAB2     		uxtb	r2, r3
 171 0012 534B     		ldr	r3, .L16
 172 0014 1A70     		strb	r2, [r3]
 276:main.c        ****     //LED_B_Write(!LED_B_Read());
 277:main.c        ****     if(DeviceAcquire() == FAILURE)     
 173              		.loc 1 277 0
 174 0016 FFF7FEFF 		bl	DeviceAcquire
 175 001a 0346     		mov	r3, r0
 176 001c 002B     		cmp	r3, #0
 177 001e 01D1     		bne	.L7
 278:main.c        ****         return(FAILURE);
 178              		.loc 1 278 0
 179 0020 0023     		movs	r3, #0
 180 0022 9BE0     		b	.L8
 181              	.L7:
 279:main.c        ****         LCD_Char_Position(0,0);
 182              		.loc 1 279 0
 183 0024 0020     		movs	r0, #0
 184 0026 0021     		movs	r1, #0
 185 0028 FFF7FEFF 		bl	LCD_Char_Position
 280:main.c        ****         LCD_Char_PrintString("Dev Acquire   OK");
 186              		.loc 1 280 0
 187 002c 4D48     		ldr	r0, .L16+4
 188 002e FFF7FEFF 		bl	LCD_Char_PrintString
 281:main.c        ****     
 282:main.c        ****     currentStep++;
 189              		.loc 1 282 0
 190 0032 4B4B     		ldr	r3, .L16
 191 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 192 0036 0133     		adds	r3, r3, #1
 193 0038 DAB2     		uxtb	r2, r3
 194 003a 494B     		ldr	r3, .L16
 195 003c 1A70     		strb	r2, [r3]
 283:main.c        ****         //LED_B_Write(!LED_B_Read());
 284:main.c        ****     if(VerifySiliconId() == FAILURE)    
 196              		.loc 1 284 0
 197 003e FFF7FEFF 		bl	VerifySiliconId
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 10


 198 0042 0346     		mov	r3, r0
 199 0044 002B     		cmp	r3, #0
 200 0046 01D1     		bne	.L9
 285:main.c        ****         return(FAILURE);
 201              		.loc 1 285 0
 202 0048 0023     		movs	r3, #0
 203 004a 87E0     		b	.L8
 204              	.L9:
 286:main.c        ****     LCD_Char_Position(0,0);
 205              		.loc 1 286 0
 206 004c 0020     		movs	r0, #0
 207 004e 0021     		movs	r1, #0
 208 0050 FFF7FEFF 		bl	LCD_Char_Position
 287:main.c        ****     LCD_Char_PrintString("Verify Sil    OK");
 209              		.loc 1 287 0
 210 0054 4448     		ldr	r0, .L16+8
 211 0056 FFF7FEFF 		bl	LCD_Char_PrintString
 288:main.c        **** 
 289:main.c        ****     currentStep++;
 212              		.loc 1 289 0
 213 005a 414B     		ldr	r3, .L16
 214 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 215 005e 0133     		adds	r3, r3, #1
 216 0060 DAB2     		uxtb	r2, r3
 217 0062 3F4B     		ldr	r3, .L16
 218 0064 1A70     		strb	r2, [r3]
 290:main.c        ****         //LED_B_Write(!LED_B_Read());
 291:main.c        ****     if(EraseAllFlash() == FAILURE)             
 219              		.loc 1 291 0
 220 0066 FFF7FEFF 		bl	EraseAllFlash
 221 006a 0346     		mov	r3, r0
 222 006c 002B     		cmp	r3, #0
 223 006e 01D1     		bne	.L10
 292:main.c        ****         return(FAILURE);
 224              		.loc 1 292 0
 225 0070 0023     		movs	r3, #0
 226 0072 73E0     		b	.L8
 227              	.L10:
 293:main.c        ****     LCD_Char_Position(0,0);
 228              		.loc 1 293 0
 229 0074 0020     		movs	r0, #0
 230 0076 0021     		movs	r1, #0
 231 0078 FFF7FEFF 		bl	LCD_Char_Position
 294:main.c        ****     LCD_Char_PrintString("Erase All     OK");
 232              		.loc 1 294 0
 233 007c 3B48     		ldr	r0, .L16+12
 234 007e FFF7FEFF 		bl	LCD_Char_PrintString
 295:main.c        **** 
 296:main.c        ****     currentStep++;
 235              		.loc 1 296 0
 236 0082 374B     		ldr	r3, .L16
 237 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 238 0086 0133     		adds	r3, r3, #1
 239 0088 DAB2     		uxtb	r2, r3
 240 008a 354B     		ldr	r3, .L16
 241 008c 1A70     		strb	r2, [r3]
 297:main.c        ****        // LED_B_Write(!LED_B_Read());
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 11


 298:main.c        ****     if(ChecksumPrivileged() == FAILURE)                    
 242              		.loc 1 298 0
 243 008e FFF7FEFF 		bl	ChecksumPrivileged
 244 0092 0346     		mov	r3, r0
 245 0094 002B     		cmp	r3, #0
 246 0096 01D1     		bne	.L11
 299:main.c        ****         return(FAILURE);
 247              		.loc 1 299 0
 248 0098 0023     		movs	r3, #0
 249 009a 5FE0     		b	.L8
 250              	.L11:
 300:main.c        ****     LCD_Char_Position(0,0);
 251              		.loc 1 300 0
 252 009c 0020     		movs	r0, #0
 253 009e 0021     		movs	r1, #0
 254 00a0 FFF7FEFF 		bl	LCD_Char_Position
 301:main.c        ****     LCD_Char_PrintString("ChkSumPrv     OK");
 255              		.loc 1 301 0
 256 00a4 3248     		ldr	r0, .L16+16
 257 00a6 FFF7FEFF 		bl	LCD_Char_PrintString
 302:main.c        **** 
 303:main.c        ****     currentStep++;
 258              		.loc 1 303 0
 259 00aa 2D4B     		ldr	r3, .L16
 260 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 261 00ae 0133     		adds	r3, r3, #1
 262 00b0 DAB2     		uxtb	r2, r3
 263 00b2 2B4B     		ldr	r3, .L16
 264 00b4 1A70     		strb	r2, [r3]
 304:main.c        ****        // LED_B_Write(!LED_B_Read());
 305:main.c        ****     if(ProgramFlash() == FAILURE)          
 265              		.loc 1 305 0
 266 00b6 FFF7FEFF 		bl	ProgramFlash
 267 00ba 0346     		mov	r3, r0
 268 00bc 002B     		cmp	r3, #0
 269 00be 01D1     		bne	.L12
 306:main.c        ****         return(FAILURE);
 270              		.loc 1 306 0
 271 00c0 0023     		movs	r3, #0
 272 00c2 4BE0     		b	.L8
 273              	.L12:
 307:main.c        ****     LCD_Char_Position(0,0);
 274              		.loc 1 307 0
 275 00c4 0020     		movs	r0, #0
 276 00c6 0021     		movs	r1, #0
 277 00c8 FFF7FEFF 		bl	LCD_Char_Position
 308:main.c        ****     LCD_Char_PrintString("Program Flash OK");
 278              		.loc 1 308 0
 279 00cc 2948     		ldr	r0, .L16+20
 280 00ce FFF7FEFF 		bl	LCD_Char_PrintString
 309:main.c        **** 
 310:main.c        ****     currentStep++;
 281              		.loc 1 310 0
 282 00d2 234B     		ldr	r3, .L16
 283 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 284 00d6 0133     		adds	r3, r3, #1
 285 00d8 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 12


 286 00da 214B     		ldr	r3, .L16
 287 00dc 1A70     		strb	r2, [r3]
 311:main.c        ****        // LED_B_Write(!LED_B_Read());
 312:main.c        ****     if(VerifyFlash() == FAILURE)       
 288              		.loc 1 312 0
 289 00de FFF7FEFF 		bl	VerifyFlash
 290 00e2 0346     		mov	r3, r0
 291 00e4 002B     		cmp	r3, #0
 292 00e6 01D1     		bne	.L13
 313:main.c        ****         return(FAILURE);
 293              		.loc 1 313 0
 294 00e8 0023     		movs	r3, #0
 295 00ea 37E0     		b	.L8
 296              	.L13:
 314:main.c        ****     LCD_Char_Position(0,0);
 297              		.loc 1 314 0
 298 00ec 0020     		movs	r0, #0
 299 00ee 0021     		movs	r1, #0
 300 00f0 FFF7FEFF 		bl	LCD_Char_Position
 315:main.c        ****     LCD_Char_PrintString("Verify Flash  OK");
 301              		.loc 1 315 0
 302 00f4 2048     		ldr	r0, .L16+24
 303 00f6 FFF7FEFF 		bl	LCD_Char_PrintString
 316:main.c        **** 
 317:main.c        ****     currentStep++;
 304              		.loc 1 317 0
 305 00fa 194B     		ldr	r3, .L16
 306 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 307 00fe 0133     		adds	r3, r3, #1
 308 0100 DAB2     		uxtb	r2, r3
 309 0102 174B     		ldr	r3, .L16
 310 0104 1A70     		strb	r2, [r3]
 318:main.c        ****        // LED_B_Write(!LED_B_Read());
 319:main.c        ****     if(ProgramProtectionSettings() == FAILURE) 
 311              		.loc 1 319 0
 312 0106 FFF7FEFF 		bl	ProgramProtectionSettings
 313 010a 0346     		mov	r3, r0
 314 010c 002B     		cmp	r3, #0
 315 010e 01D1     		bne	.L14
 320:main.c        ****         return(FAILURE);
 316              		.loc 1 320 0
 317 0110 0023     		movs	r3, #0
 318 0112 23E0     		b	.L8
 319              	.L14:
 321:main.c        ****     LCD_Char_Position(0,0);
 320              		.loc 1 321 0
 321 0114 0020     		movs	r0, #0
 322 0116 0021     		movs	r1, #0
 323 0118 FFF7FEFF 		bl	LCD_Char_Position
 322:main.c        ****     LCD_Char_PrintString("Prg Protect   OK");
 324              		.loc 1 322 0
 325 011c 1748     		ldr	r0, .L16+28
 326 011e FFF7FEFF 		bl	LCD_Char_PrintString
 323:main.c        **** 
 324:main.c        ****     currentStep++;
 327              		.loc 1 324 0
 328 0122 0F4B     		ldr	r3, .L16
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 13


 329 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 330 0126 0133     		adds	r3, r3, #1
 331 0128 DAB2     		uxtb	r2, r3
 332 012a 0D4B     		ldr	r3, .L16
 333 012c 1A70     		strb	r2, [r3]
 325:main.c        ****        // LED_B_Write(!LED_B_Read());
 326:main.c        ****     /* Disable for now since this fails    
 327:main.c        ****     if(VerifyProtectionSettings() == FAILURE)
 328:main.c        ****         return(FAILURE);
 329:main.c        ****     LCD_Char_Position(0,0);
 330:main.c        ****     LCD_Char_PrintString("Verify Prot   OK");
 331:main.c        **** */
 332:main.c        ****     currentStep++;
 334              		.loc 1 332 0
 335 012e 0C4B     		ldr	r3, .L16
 336 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 337 0132 0133     		adds	r3, r3, #1
 338 0134 DAB2     		uxtb	r2, r3
 339 0136 0A4B     		ldr	r3, .L16
 340 0138 1A70     		strb	r2, [r3]
 333:main.c        ****        // LED_B_Write(!LED_B_Read());
 334:main.c        ****     if(VerifyChecksum() == FAILURE) 
 341              		.loc 1 334 0
 342 013a FFF7FEFF 		bl	VerifyChecksum
 343 013e 0346     		mov	r3, r0
 344 0140 002B     		cmp	r3, #0
 345 0142 01D1     		bne	.L15
 335:main.c        ****         return(FAILURE);
 346              		.loc 1 335 0
 347 0144 0023     		movs	r3, #0
 348 0146 09E0     		b	.L8
 349              	.L15:
 336:main.c        ****         LCD_Char_Position(0,0);
 350              		.loc 1 336 0
 351 0148 0020     		movs	r0, #0
 352 014a 0021     		movs	r1, #0
 353 014c FFF7FEFF 		bl	LCD_Char_Position
 337:main.c        ****     LCD_Char_PrintString("Verify ChkSum OK");
 354              		.loc 1 337 0
 355 0150 0B48     		ldr	r0, .L16+32
 356 0152 FFF7FEFF 		bl	LCD_Char_PrintString
 338:main.c        **** 
 339:main.c        ****     ExitProgrammingMode();
 357              		.loc 1 339 0
 358 0156 FFF7FEFF 		bl	ExitProgrammingMode
 340:main.c        ****     
 341:main.c        **** 	/* All the steps were completed successfully */
 342:main.c        ****     return(SUCCESS);
 359              		.loc 1 342 0
 360 015a 0123     		movs	r3, #1
 361              	.L8:
 343:main.c        **** }
 362              		.loc 1 343 0
 363 015c 1846     		mov	r0, r3
 364 015e 80BD     		pop	{r7, pc}
 365              	.L17:
 366              		.align	2
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 14


 367              	.L16:
 368 0160 00000000 		.word	currentStep
 369 0164 00000000 		.word	.LC0
 370 0168 14000000 		.word	.LC1
 371 016c 28000000 		.word	.LC2
 372 0170 3C000000 		.word	.LC3
 373 0174 50000000 		.word	.LC4
 374 0178 64000000 		.word	.LC5
 375 017c 78000000 		.word	.LC6
 376 0180 8C000000 		.word	.LC7
 377              		.cfi_endproc
 378              	.LFE64:
 379              		.size	ProgramDevice, .-ProgramDevice
 380              		.text
 381              	.Letext0:
 382              		.file 2 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 383              		.file 3 "c:\\program files\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 384              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 385              		.section	.debug_info,"",%progbits
 386              	.Ldebug_info0:
 387 0000 20010000 		.4byte	0x120
 388 0004 0400     		.2byte	0x4
 389 0006 00000000 		.4byte	.Ldebug_abbrev0
 390 000a 04       		.byte	0x4
 391 000b 01       		.uleb128 0x1
 392 000c A9000000 		.4byte	.LASF20
 393 0010 01       		.byte	0x1
 394 0011 2E000000 		.4byte	.LASF21
 395 0015 4C010000 		.4byte	.LASF22
 396 0019 00000000 		.4byte	.Ldebug_ranges0+0
 397 001d 00000000 		.4byte	0
 398 0021 00000000 		.4byte	.Ldebug_line0
 399 0025 02       		.uleb128 0x2
 400 0026 01       		.byte	0x1
 401 0027 06       		.byte	0x6
 402 0028 A6010000 		.4byte	.LASF0
 403 002c 02       		.uleb128 0x2
 404 002d 01       		.byte	0x1
 405 002e 08       		.byte	0x8
 406 002f 8D000000 		.4byte	.LASF1
 407 0033 02       		.uleb128 0x2
 408 0034 02       		.byte	0x2
 409 0035 05       		.byte	0x5
 410 0036 CE010000 		.4byte	.LASF2
 411 003a 02       		.uleb128 0x2
 412 003b 02       		.byte	0x2
 413 003c 07       		.byte	0x7
 414 003d 0E000000 		.4byte	.LASF3
 415 0041 03       		.uleb128 0x3
 416 0042 B2010000 		.4byte	.LASF9
 417 0046 02       		.byte	0x2
 418 0047 3F       		.byte	0x3f
 419 0048 4C000000 		.4byte	0x4c
 420 004c 02       		.uleb128 0x2
 421 004d 04       		.byte	0x4
 422 004e 05       		.byte	0x5
 423 004f A0000000 		.4byte	.LASF4
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 15


 424 0053 02       		.uleb128 0x2
 425 0054 04       		.byte	0x4
 426 0055 07       		.byte	0x7
 427 0056 48000000 		.4byte	.LASF5
 428 005a 02       		.uleb128 0x2
 429 005b 08       		.byte	0x8
 430 005c 05       		.byte	0x5
 431 005d 3E010000 		.4byte	.LASF6
 432 0061 02       		.uleb128 0x2
 433 0062 08       		.byte	0x8
 434 0063 07       		.byte	0x7
 435 0064 6A000000 		.4byte	.LASF7
 436 0068 04       		.uleb128 0x4
 437 0069 04       		.byte	0x4
 438 006a 05       		.byte	0x5
 439 006b 696E7400 		.ascii	"int\000"
 440 006f 02       		.uleb128 0x2
 441 0070 04       		.byte	0x4
 442 0071 07       		.byte	0x7
 443 0072 21000000 		.4byte	.LASF8
 444 0076 03       		.uleb128 0x3
 445 0077 D8010000 		.4byte	.LASF10
 446 007b 03       		.byte	0x3
 447 007c 2C       		.byte	0x2c
 448 007d 41000000 		.4byte	0x41
 449 0081 02       		.uleb128 0x2
 450 0082 04       		.byte	0x4
 451 0083 04       		.byte	0x4
 452 0084 BC010000 		.4byte	.LASF11
 453 0088 02       		.uleb128 0x2
 454 0089 08       		.byte	0x8
 455 008a 04       		.byte	0x4
 456 008b 37010000 		.4byte	.LASF12
 457 008f 02       		.uleb128 0x2
 458 0090 01       		.byte	0x1
 459 0091 08       		.byte	0x8
 460 0092 9B000000 		.4byte	.LASF13
 461 0096 02       		.uleb128 0x2
 462 0097 04       		.byte	0x4
 463 0098 07       		.byte	0x7
 464 0099 E0010000 		.4byte	.LASF14
 465 009d 05       		.uleb128 0x5
 466 009e 35000000 		.4byte	.LASF23
 467 00a2 01       		.byte	0x1
 468 00a3 6C       		.byte	0x6c
 469 00a4 68000000 		.4byte	0x68
 470 00a8 00000000 		.4byte	.LFB63
 471 00ac 84000000 		.4byte	.LFE63-.LFB63
 472 00b0 01       		.uleb128 0x1
 473 00b1 9C       		.byte	0x9c
 474 00b2 EB000000 		.4byte	0xeb
 475 00b6 06       		.uleb128 0x6
 476 00b7 06000000 		.4byte	.LBB2
 477 00bb 7C000000 		.4byte	.LBE2-.LBB2
 478 00bf 07       		.uleb128 0x7
 479 00c0 3A000000 		.4byte	.LASF15
 480 00c4 01       		.byte	0x1
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 16


 481 00c5 71       		.byte	0x71
 482 00c6 2C000000 		.4byte	0x2c
 483 00ca 02       		.uleb128 0x2
 484 00cb 91       		.byte	0x91
 485 00cc 77       		.sleb128 -9
 486 00cd 07       		.uleb128 0x7
 487 00ce 81000000 		.4byte	.LASF16
 488 00d2 01       		.byte	0x1
 489 00d3 74       		.byte	0x74
 490 00d4 2C000000 		.4byte	0x2c
 491 00d8 02       		.uleb128 0x2
 492 00d9 91       		.byte	0x91
 493 00da 76       		.sleb128 -10
 494 00db 07       		.uleb128 0x7
 495 00dc 5A000000 		.4byte	.LASF17
 496 00e0 01       		.byte	0x1
 497 00e1 78       		.byte	0x78
 498 00e2 2C000000 		.4byte	0x2c
 499 00e6 02       		.uleb128 0x2
 500 00e7 91       		.byte	0x91
 501 00e8 75       		.sleb128 -11
 502 00e9 00       		.byte	0
 503 00ea 00       		.byte	0
 504 00eb 08       		.uleb128 0x8
 505 00ec 00000000 		.4byte	.LASF24
 506 00f0 01       		.byte	0x1
 507 00f1 0F01     		.2byte	0x10f
 508 00f3 2C000000 		.4byte	0x2c
 509 00f7 00000000 		.4byte	.LFB64
 510 00fb 84010000 		.4byte	.LFE64-.LFB64
 511 00ff 01       		.uleb128 0x1
 512 0100 9C       		.byte	0x9c
 513 0101 09       		.uleb128 0x9
 514 0102 99010000 		.4byte	.LASF18
 515 0106 04       		.byte	0x4
 516 0107 9606     		.2byte	0x696
 517 0109 0D010000 		.4byte	0x10d
 518 010d 0A       		.uleb128 0xa
 519 010e 76000000 		.4byte	0x76
 520 0112 0B       		.uleb128 0xb
 521 0113 C2010000 		.4byte	.LASF19
 522 0117 01       		.byte	0x1
 523 0118 4E       		.byte	0x4e
 524 0119 2C000000 		.4byte	0x2c
 525 011d 05       		.uleb128 0x5
 526 011e 03       		.byte	0x3
 527 011f 00000000 		.4byte	currentStep
 528 0123 00       		.byte	0
 529              		.section	.debug_abbrev,"",%progbits
 530              	.Ldebug_abbrev0:
 531 0000 01       		.uleb128 0x1
 532 0001 11       		.uleb128 0x11
 533 0002 01       		.byte	0x1
 534 0003 25       		.uleb128 0x25
 535 0004 0E       		.uleb128 0xe
 536 0005 13       		.uleb128 0x13
 537 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 17


 538 0007 03       		.uleb128 0x3
 539 0008 0E       		.uleb128 0xe
 540 0009 1B       		.uleb128 0x1b
 541 000a 0E       		.uleb128 0xe
 542 000b 55       		.uleb128 0x55
 543 000c 17       		.uleb128 0x17
 544 000d 11       		.uleb128 0x11
 545 000e 01       		.uleb128 0x1
 546 000f 10       		.uleb128 0x10
 547 0010 17       		.uleb128 0x17
 548 0011 00       		.byte	0
 549 0012 00       		.byte	0
 550 0013 02       		.uleb128 0x2
 551 0014 24       		.uleb128 0x24
 552 0015 00       		.byte	0
 553 0016 0B       		.uleb128 0xb
 554 0017 0B       		.uleb128 0xb
 555 0018 3E       		.uleb128 0x3e
 556 0019 0B       		.uleb128 0xb
 557 001a 03       		.uleb128 0x3
 558 001b 0E       		.uleb128 0xe
 559 001c 00       		.byte	0
 560 001d 00       		.byte	0
 561 001e 03       		.uleb128 0x3
 562 001f 16       		.uleb128 0x16
 563 0020 00       		.byte	0
 564 0021 03       		.uleb128 0x3
 565 0022 0E       		.uleb128 0xe
 566 0023 3A       		.uleb128 0x3a
 567 0024 0B       		.uleb128 0xb
 568 0025 3B       		.uleb128 0x3b
 569 0026 0B       		.uleb128 0xb
 570 0027 49       		.uleb128 0x49
 571 0028 13       		.uleb128 0x13
 572 0029 00       		.byte	0
 573 002a 00       		.byte	0
 574 002b 04       		.uleb128 0x4
 575 002c 24       		.uleb128 0x24
 576 002d 00       		.byte	0
 577 002e 0B       		.uleb128 0xb
 578 002f 0B       		.uleb128 0xb
 579 0030 3E       		.uleb128 0x3e
 580 0031 0B       		.uleb128 0xb
 581 0032 03       		.uleb128 0x3
 582 0033 08       		.uleb128 0x8
 583 0034 00       		.byte	0
 584 0035 00       		.byte	0
 585 0036 05       		.uleb128 0x5
 586 0037 2E       		.uleb128 0x2e
 587 0038 01       		.byte	0x1
 588 0039 3F       		.uleb128 0x3f
 589 003a 19       		.uleb128 0x19
 590 003b 03       		.uleb128 0x3
 591 003c 0E       		.uleb128 0xe
 592 003d 3A       		.uleb128 0x3a
 593 003e 0B       		.uleb128 0xb
 594 003f 3B       		.uleb128 0x3b
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 18


 595 0040 0B       		.uleb128 0xb
 596 0041 49       		.uleb128 0x49
 597 0042 13       		.uleb128 0x13
 598 0043 11       		.uleb128 0x11
 599 0044 01       		.uleb128 0x1
 600 0045 12       		.uleb128 0x12
 601 0046 06       		.uleb128 0x6
 602 0047 40       		.uleb128 0x40
 603 0048 18       		.uleb128 0x18
 604 0049 9642     		.uleb128 0x2116
 605 004b 19       		.uleb128 0x19
 606 004c 01       		.uleb128 0x1
 607 004d 13       		.uleb128 0x13
 608 004e 00       		.byte	0
 609 004f 00       		.byte	0
 610 0050 06       		.uleb128 0x6
 611 0051 0B       		.uleb128 0xb
 612 0052 01       		.byte	0x1
 613 0053 11       		.uleb128 0x11
 614 0054 01       		.uleb128 0x1
 615 0055 12       		.uleb128 0x12
 616 0056 06       		.uleb128 0x6
 617 0057 00       		.byte	0
 618 0058 00       		.byte	0
 619 0059 07       		.uleb128 0x7
 620 005a 34       		.uleb128 0x34
 621 005b 00       		.byte	0
 622 005c 03       		.uleb128 0x3
 623 005d 0E       		.uleb128 0xe
 624 005e 3A       		.uleb128 0x3a
 625 005f 0B       		.uleb128 0xb
 626 0060 3B       		.uleb128 0x3b
 627 0061 0B       		.uleb128 0xb
 628 0062 49       		.uleb128 0x49
 629 0063 13       		.uleb128 0x13
 630 0064 02       		.uleb128 0x2
 631 0065 18       		.uleb128 0x18
 632 0066 00       		.byte	0
 633 0067 00       		.byte	0
 634 0068 08       		.uleb128 0x8
 635 0069 2E       		.uleb128 0x2e
 636 006a 00       		.byte	0
 637 006b 3F       		.uleb128 0x3f
 638 006c 19       		.uleb128 0x19
 639 006d 03       		.uleb128 0x3
 640 006e 0E       		.uleb128 0xe
 641 006f 3A       		.uleb128 0x3a
 642 0070 0B       		.uleb128 0xb
 643 0071 3B       		.uleb128 0x3b
 644 0072 05       		.uleb128 0x5
 645 0073 27       		.uleb128 0x27
 646 0074 19       		.uleb128 0x19
 647 0075 49       		.uleb128 0x49
 648 0076 13       		.uleb128 0x13
 649 0077 11       		.uleb128 0x11
 650 0078 01       		.uleb128 0x1
 651 0079 12       		.uleb128 0x12
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 19


 652 007a 06       		.uleb128 0x6
 653 007b 40       		.uleb128 0x40
 654 007c 18       		.uleb128 0x18
 655 007d 9642     		.uleb128 0x2116
 656 007f 19       		.uleb128 0x19
 657 0080 00       		.byte	0
 658 0081 00       		.byte	0
 659 0082 09       		.uleb128 0x9
 660 0083 34       		.uleb128 0x34
 661 0084 00       		.byte	0
 662 0085 03       		.uleb128 0x3
 663 0086 0E       		.uleb128 0xe
 664 0087 3A       		.uleb128 0x3a
 665 0088 0B       		.uleb128 0xb
 666 0089 3B       		.uleb128 0x3b
 667 008a 05       		.uleb128 0x5
 668 008b 49       		.uleb128 0x49
 669 008c 13       		.uleb128 0x13
 670 008d 3F       		.uleb128 0x3f
 671 008e 19       		.uleb128 0x19
 672 008f 3C       		.uleb128 0x3c
 673 0090 19       		.uleb128 0x19
 674 0091 00       		.byte	0
 675 0092 00       		.byte	0
 676 0093 0A       		.uleb128 0xa
 677 0094 35       		.uleb128 0x35
 678 0095 00       		.byte	0
 679 0096 49       		.uleb128 0x49
 680 0097 13       		.uleb128 0x13
 681 0098 00       		.byte	0
 682 0099 00       		.byte	0
 683 009a 0B       		.uleb128 0xb
 684 009b 34       		.uleb128 0x34
 685 009c 00       		.byte	0
 686 009d 03       		.uleb128 0x3
 687 009e 0E       		.uleb128 0xe
 688 009f 3A       		.uleb128 0x3a
 689 00a0 0B       		.uleb128 0xb
 690 00a1 3B       		.uleb128 0x3b
 691 00a2 0B       		.uleb128 0xb
 692 00a3 49       		.uleb128 0x49
 693 00a4 13       		.uleb128 0x13
 694 00a5 3F       		.uleb128 0x3f
 695 00a6 19       		.uleb128 0x19
 696 00a7 02       		.uleb128 0x2
 697 00a8 18       		.uleb128 0x18
 698 00a9 00       		.byte	0
 699 00aa 00       		.byte	0
 700 00ab 00       		.byte	0
 701              		.section	.debug_aranges,"",%progbits
 702 0000 24000000 		.4byte	0x24
 703 0004 0200     		.2byte	0x2
 704 0006 00000000 		.4byte	.Ldebug_info0
 705 000a 04       		.byte	0x4
 706 000b 00       		.byte	0
 707 000c 0000     		.2byte	0
 708 000e 0000     		.2byte	0
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 20


 709 0010 00000000 		.4byte	.LFB63
 710 0014 84000000 		.4byte	.LFE63-.LFB63
 711 0018 00000000 		.4byte	.LFB64
 712 001c 84010000 		.4byte	.LFE64-.LFB64
 713 0020 00000000 		.4byte	0
 714 0024 00000000 		.4byte	0
 715              		.section	.debug_ranges,"",%progbits
 716              	.Ldebug_ranges0:
 717 0000 00000000 		.4byte	.LFB63
 718 0004 84000000 		.4byte	.LFE63
 719 0008 00000000 		.4byte	.LFB64
 720 000c 84010000 		.4byte	.LFE64
 721 0010 00000000 		.4byte	0
 722 0014 00000000 		.4byte	0
 723              		.section	.debug_line,"",%progbits
 724              	.Ldebug_line0:
 725 0000 B0010000 		.section	.debug_str,"MS",%progbits,1
 725      02002E01 
 725      00000201 
 725      FB0E0D00 
 725      01010101 
 726              	.LASF24:
 727 0000 50726F67 		.ascii	"ProgramDevice\000"
 727      72616D44 
 727      65766963 
 727      6500
 728              	.LASF3:
 729 000e 73686F72 		.ascii	"short unsigned int\000"
 729      7420756E 
 729      7369676E 
 729      65642069 
 729      6E7400
 730              	.LASF8:
 731 0021 756E7369 		.ascii	"unsigned int\000"
 731      676E6564 
 731      20696E74 
 731      00
 732              	.LASF21:
 733 002e 6D61696E 		.ascii	"main.c\000"
 733      2E6300
 734              	.LASF23:
 735 0035 6D61696E 		.ascii	"main\000"
 735      00
 736              	.LASF15:
 737 003a 70726F67 		.ascii	"programResult\000"
 737      72616D52 
 737      6573756C 
 737      7400
 738              	.LASF5:
 739 0048 6C6F6E67 		.ascii	"long unsigned int\000"
 739      20756E73 
 739      69676E65 
 739      6420696E 
 739      7400
 740              	.LASF17:
 741 005a 73726F6D 		.ascii	"sromErrorStatus\000"
 741      4572726F 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 21


 741      72537461 
 741      74757300 
 742              	.LASF7:
 743 006a 6C6F6E67 		.ascii	"long long unsigned int\000"
 743      206C6F6E 
 743      6720756E 
 743      7369676E 
 743      65642069 
 744              	.LASF16:
 745 0081 6572726F 		.ascii	"errorStatus\000"
 745      72537461 
 745      74757300 
 746              	.LASF1:
 747 008d 756E7369 		.ascii	"unsigned char\000"
 747      676E6564 
 747      20636861 
 747      7200
 748              	.LASF13:
 749 009b 63686172 		.ascii	"char\000"
 749      00
 750              	.LASF4:
 751 00a0 6C6F6E67 		.ascii	"long int\000"
 751      20696E74 
 751      00
 752              	.LASF20:
 753 00a9 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 753      4320342E 
 753      392E3320 
 753      32303135 
 753      30333033 
 754 00dc 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 754      20726576 
 754      6973696F 
 754      6E203232 
 754      31323230 
 755 010f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 755      66756E63 
 755      74696F6E 
 755      2D736563 
 755      74696F6E 
 756              	.LASF12:
 757 0137 646F7562 		.ascii	"double\000"
 757      6C6500
 758              	.LASF6:
 759 013e 6C6F6E67 		.ascii	"long long int\000"
 759      206C6F6E 
 759      6720696E 
 759      7400
 760              	.LASF22:
 761 014c 443A5C55 		.ascii	"D:\\Users\\WorkBench\\Documents\\GitHub\\BackboneHS"
 761      73657273 
 761      5C576F72 
 761      6B42656E 
 761      63685C44 
 762 017a 53505C50 		.ascii	"SP\\Programmer\\Programmer.cydsn\000"
 762      726F6772 
 762      616D6D65 
ARM GAS  C:\Users\WORKBE~1\AppData\Local\Temp\cc0EbUNu.s 			page 22


 762      725C5072 
 762      6F677261 
 763              	.LASF18:
 764 0199 49544D5F 		.ascii	"ITM_RxBuffer\000"
 764      52784275 
 764      66666572 
 764      00
 765              	.LASF0:
 766 01a6 7369676E 		.ascii	"signed char\000"
 766      65642063 
 766      68617200 
 767              	.LASF9:
 768 01b2 5F5F696E 		.ascii	"__int32_t\000"
 768      7433325F 
 768      7400
 769              	.LASF11:
 770 01bc 666C6F61 		.ascii	"float\000"
 770      7400
 771              	.LASF19:
 772 01c2 63757272 		.ascii	"currentStep\000"
 772      656E7453 
 772      74657000 
 773              	.LASF2:
 774 01ce 73686F72 		.ascii	"short int\000"
 774      7420696E 
 774      7400
 775              	.LASF10:
 776 01d8 696E7433 		.ascii	"int32_t\000"
 776      325F7400 
 777              	.LASF14:
 778 01e0 73697A65 		.ascii	"sizetype\000"
 778      74797065 
 778      00
 779              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
